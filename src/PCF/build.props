<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <!-- 
    Please read if you are unfamiliar with MsBuild properties.
    build.props should be imported at the top of your project file so we can share a common set of build configuration.
    This is a shared build settings, which can be used to keep your project clean, yet allow you to override any property you want
    This props file Should be imported before Microsoft.Common.props in the following format:
      <Import Project="$([MSBuild]::GetDirectoryNameOfFileAbove($(MSBuildThisFileDirectory), build.props))\build.props" />
      <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
    If any of the settings defined in the Packages\CarbonV2.MSBuild.Wrap\Build common Targets template folder does not meet your project needs, you can always override the properties in 2 ways. 
      1) Define the properties in your CSProj files after Microsoft.Common.props
      2) Create a ..\Product\Build\Build.Settings and override using MSBuild Property constructs 
  --> 
  <PropertyGroup>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>
  <PropertyGroup>
    <EnlistmentRoot>$(MSBuildThisFileDirectory)</EnlistmentRoot>
    <EnlistmentRoot>$(EnlistmentRoot.TrimEnd('\\'))</EnlistmentRoot>
    <SolutionDir Condition="$(SolutionDir) == '' Or $(SolutionDir) == '*Undefined*'">$(MSBuildThisFileDirectory)</SolutionDir>
  </PropertyGroup>
  <PropertyGroup>
    <OutputPath>$(EnlistmentRoot)\bin\$(Configuration)\$(Platform)\$(MSBuildProjectName)</OutputPath>
  </PropertyGroup>
  <PropertyGroup>
    <AssemblyOriginatorKeyFile>$(EnlistmentRoot)\Product\Build\UnprotectedKey.snk</AssemblyOriginatorKeyFile>
  </PropertyGroup>
      <!-- Set Release and symbol paths.  Not allowed to override release and symbol paths -->
  <PropertyGroup>
    <_BaseReleasePath>$(EnlistmentRoot)\Bin\$(Configuration)\$(Platform)</_BaseReleasePath>
    <BaseReleasePath>$(_BaseReleasePath)</BaseReleasePath>
    <ReleaseRoot>$(BaseReleasePath)</ReleaseRoot>
    <ReleasePath>$(ReleaseRoot)</ReleasePath>
    <!-- A boolean value that indicates whether symbols are generated by the build. -->
    <DebugSymbols>true</DebugSymbols>
    <CommandFeedBuildPath>$(EnlistmentRoot)\Product\Build\</CommandFeedBuildPath>
    <NugetPackagesFolder>$(EnlistmentRoot)\..\NugetPackages\</NugetPackagesFolder>
    <!-- Copy all files to the ReleasePath -->
    <CopyFilesToReleasePathEnabled Condition="'$(CopyFilesToReleasePathEnabled)' == ''">false</CopyFilesToReleasePathEnabled>
    <VisualStudioVersion Condition="'$(VisualStudioVersion)' == ''">14.0</VisualStudioVersion>
  </PropertyGroup>
  <!-- Defines the level of debug information that you want generated. Valid values are "full," "pdbonly," and "none." -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
     <DebugType>Full</DebugType>
  </PropertyGroup>
  <!-- A boolean value that when set to true, enables compiler optimizations. This property is equivalent to the /optimize compiler switch. -->
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
     <DebugType>pdbonly</DebugType>
     <Optimize>true</Optimize>
  </PropertyGroup> 
  <Import Project="$(SolutionDir)\Build\Build.settings" Condition="Exists('$(SolutionDir)\Build\Build.settings')" />
  <Target Name="Build" DependsOnTargets="$(BuildDependsOn)" />
</Project>