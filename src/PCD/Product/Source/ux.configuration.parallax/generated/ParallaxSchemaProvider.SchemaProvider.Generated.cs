// ----------------------------------------------------------------------------------------------
// <copyright file="ParallaxSchemaProvider.SchemaProvider.Generated.cs" company="Microsoft">
//     This file is generated by a tool.
// Copyright (c) Microsoft Corporation. All rights reserved.
// </copyright>
// ----------------------------------------------------------------------------------------------

//////////////////////////////////////////////////////////////////////////////////////////////////
//// GENERATED CODE - PLEASE DO NOT MODIFY BY HAND!!! ALL YOUR CHANGES WILL BE OVERWRITTEN!!! ////
//////////////////////////////////////////////////////////////////////////////////////////////////

namespace Microsoft.PrivacyServices.UX.Configuration
{
    /// <summary>
    /// Parallax-generated implementation of a variant object interface. Subject to change without notice.
    /// </summary>
    [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Never)]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("microsoft.search.platform.parallax.tools.codegenerator.exe", "1.0.0.0")]
    public sealed class _ParallaxSchemaProvider_SchemaProvider_ : global::Microsoft.Search.Platform.Parallax.Core.Schema.SchemaProvider
    {
        private static readonly global::Microsoft.Search.Platform.Parallax.Core.Schema.Schema schema;

        public override global::Microsoft.Search.Platform.Parallax.Core.Schema.Schema Schema
        {
            get
            {
                return schema;
            }
        }

        static _ParallaxSchemaProvider_SchemaProvider_()
        {
            schema = CreateSchema(global::System.Guid.Parse("7670d2f2285746f6a906604082fa2567"), "ParallaxSchemaProvider", "ParallaxSchemaProvider");

            Register_Microsoft_PrivacyServices_UX_Configuration_IAzureADConfig(schema);
            Register_Microsoft_PrivacyServices_UX_Configuration_ICmsCacheConfig(schema);
            Register_Microsoft_PrivacyServices_UX_Configuration_IFlightingConfig(schema);
            Register_Microsoft_PrivacyServices_UX_Configuration_IMocksConfig(schema);
            Register_Microsoft_PrivacyServices_UX_Configuration_INgpLockdownConfig(schema);
            Register_Microsoft_PrivacyServices_UX_Configuration_IPdmsClientConfig(schema);
            Register_Microsoft_PrivacyServices_UX_Configuration_IPxsClientConfig(schema);
            Register_Microsoft_PrivacyServices_UX_Configuration_IRoleBasedAuthConfig(schema);
            Register_Microsoft_PrivacyServices_UX_Configuration_IServiceTreeClientConfig(schema);
            Register_Microsoft_PrivacyServices_UX_Configuration_IUhfClientConfig(schema);
        }

        private static void Register_Microsoft_PrivacyServices_UX_Configuration_IAzureADConfig(global::Microsoft.Search.Platform.Parallax.Core.Schema.Schema schema)
        {
            var typeSchema = CreateTypeSchema<global::Microsoft.PrivacyServices.UX.Configuration.IAzureADConfig>(
                string.Empty,
                schema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeMultiplicityKind.Unrestricted,
                null);

            var propertySchema_Authority = CreateDataPropertySchema(
                typeSchema,
                "Authority",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.IAzureADConfig, string>(vo => vo.@Authority, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                true,
                null,
                null);

            var propertySchema_AppId = CreateDataPropertySchema(
                typeSchema,
                "AppId",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.IAzureADConfig, string>(vo => vo.@AppId, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                true,
                null,
                null);

            var propertySchema_CertSubjectName = CreateDataPropertySchema(
                typeSchema,
                "CertSubjectName",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.IAzureADConfig, string>(vo => vo.@CertSubjectName, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                true,
                null,
                null);

            var propertySchema_PostLogoutUrl = CreateDataPropertySchema(
                typeSchema,
                "PostLogoutUrl",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.IAzureADConfig, string>(vo => vo.@PostLogoutUrl, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                true,
                null,
                null);

            global::Microsoft.Search.Platform.Parallax.Core.Schema.InstanceProviderBuilder builderCallback_DynamicStorageSelection = delegate(global::System.Collections.Generic.ICollection<global::Microsoft.Search.Platform.Parallax.Core.Model.VariantFilter> context, global::Microsoft.Search.Platform.Parallax.Core.Schema.IObjectDataInitializer initializer)
            {
                var instanceProvider = new global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IAzureADConfig_DataAccessor_();
                initializer.InitializeForDynamicStorageSelection(propertySchema_Authority, context, out instanceProvider._Authority_MaterializedValue_, out instanceProvider._Authority_ValueProvider_);
                initializer.InitializeForDynamicStorageSelection(propertySchema_AppId, context, out instanceProvider._AppId_MaterializedValue_, out instanceProvider._AppId_ValueProvider_);
                initializer.InitializeForDynamicStorageSelection(propertySchema_CertSubjectName, context, out instanceProvider._CertSubjectName_MaterializedValue_, out instanceProvider._CertSubjectName_ValueProvider_);
                initializer.InitializeForDynamicStorageSelection(propertySchema_PostLogoutUrl, context, out instanceProvider._PostLogoutUrl_MaterializedValue_, out instanceProvider._PostLogoutUrl_ValueProvider_);
                return instanceProvider;
            };

            CreateTypeImplementation(
                "DynamicStorageSelection",
                "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces",
                typeSchema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeImplementationKind.DynamicStorageSelection,
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IAzureADConfig_Implementation_),
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IAzureADConfig_DataAccessor_),
                builderCallback_DynamicStorageSelection);

            global::Microsoft.Search.Platform.Parallax.Core.Schema.InstanceProviderBuilder builderCallback_DataOnly = delegate(global::System.Collections.Generic.ICollection<global::Microsoft.Search.Platform.Parallax.Core.Model.VariantFilter> context, global::Microsoft.Search.Platform.Parallax.Core.Schema.IObjectDataInitializer initializer)
            {
                var instanceProvider = new global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IAzureADConfig_Implementation_();
                initializer.InitializeForDataOnly(propertySchema_Authority, context, out instanceProvider._Authority_MaterializedValue_);
                initializer.InitializeForDataOnly(propertySchema_AppId, context, out instanceProvider._AppId_MaterializedValue_);
                initializer.InitializeForDataOnly(propertySchema_CertSubjectName, context, out instanceProvider._CertSubjectName_MaterializedValue_);
                initializer.InitializeForDataOnly(propertySchema_PostLogoutUrl, context, out instanceProvider._PostLogoutUrl_MaterializedValue_);
                return instanceProvider;
            };

            CreateTypeImplementation(
                "DataOnly",
                "Implementation with a fully materialized and context-unaware state initialized at data source loading time",
                typeSchema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeImplementationKind.DataOnly,
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IAzureADConfig_Implementation_),
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IAzureADConfig_Implementation_),
                builderCallback_DataOnly);
        }

        private static void Register_Microsoft_PrivacyServices_UX_Configuration_ICmsCacheConfig(global::Microsoft.Search.Platform.Parallax.Core.Schema.Schema schema)
        {
            var typeSchema = CreateTypeSchema<global::Microsoft.PrivacyServices.UX.Configuration.ICmsCacheConfig>(
                string.Empty,
                schema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeMultiplicityKind.Unrestricted,
                null);

            var propertySchema_Name = CreateDataPropertySchema(
                typeSchema,
                "Name",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.ICmsCacheConfig, string>(vo => vo.@Name, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                false,
                null,
                null);

            var propertySchema_MemoryLimitMegaBytes = CreateDataPropertySchema(
                typeSchema,
                "MemoryLimitMegaBytes",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.ICmsCacheConfig, uint>(vo => vo.@MemoryLimitMegaBytes, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                false,
                null,
                null);

            var propertySchema_PhysicalMemoryLimitPercentage = CreateDataPropertySchema(
                typeSchema,
                "PhysicalMemoryLimitPercentage",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.ICmsCacheConfig, uint>(vo => vo.@PhysicalMemoryLimitPercentage, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                false,
                null,
                null);

            var propertySchema_PollingIntervalTimeSpan = CreateDataPropertySchema(
                typeSchema,
                "PollingIntervalTimeSpan",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.ICmsCacheConfig, string>(vo => vo.@PollingIntervalTimeSpan, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                false,
                null,
                null);

            var propertySchema_ExecuteSourceGetterInBackground = CreateDataPropertySchema(
                typeSchema,
                "ExecuteSourceGetterInBackground",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.ICmsCacheConfig, bool>(vo => vo.@ExecuteSourceGetterInBackground, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                false,
                null,
                null);

            var propertySchema_PersistOnFailures = CreateDataPropertySchema(
                typeSchema,
                "PersistOnFailures",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.ICmsCacheConfig, bool>(vo => vo.@PersistOnFailures, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                false,
                null,
                null);

            var propertySchema_AlwaysRefreshOnHit = CreateDataPropertySchema(
                typeSchema,
                "AlwaysRefreshOnHit",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.ICmsCacheConfig, bool>(vo => vo.@AlwaysRefreshOnHit, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                false,
                null,
                null);

            global::Microsoft.Search.Platform.Parallax.Core.Schema.InstanceProviderBuilder builderCallback_DynamicStorageSelection = delegate(global::System.Collections.Generic.ICollection<global::Microsoft.Search.Platform.Parallax.Core.Model.VariantFilter> context, global::Microsoft.Search.Platform.Parallax.Core.Schema.IObjectDataInitializer initializer)
            {
                var instanceProvider = new global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_ICmsCacheConfig_DataAccessor_();
                initializer.InitializeForDynamicStorageSelection(propertySchema_Name, context, out instanceProvider._Name_MaterializedValue_, out instanceProvider._Name_ValueProvider_);
                initializer.InitializeForDynamicStorageSelection(propertySchema_MemoryLimitMegaBytes, context, out instanceProvider._MemoryLimitMegaBytes_MaterializedValue_, out instanceProvider._MemoryLimitMegaBytes_ValueProvider_);
                initializer.InitializeForDynamicStorageSelection(propertySchema_PhysicalMemoryLimitPercentage, context, out instanceProvider._PhysicalMemoryLimitPercentage_MaterializedValue_, out instanceProvider._PhysicalMemoryLimitPercentage_ValueProvider_);
                initializer.InitializeForDynamicStorageSelection(propertySchema_PollingIntervalTimeSpan, context, out instanceProvider._PollingIntervalTimeSpan_MaterializedValue_, out instanceProvider._PollingIntervalTimeSpan_ValueProvider_);
                initializer.InitializeForDynamicStorageSelection(propertySchema_ExecuteSourceGetterInBackground, context, out instanceProvider._ExecuteSourceGetterInBackground_MaterializedValue_, out instanceProvider._ExecuteSourceGetterInBackground_ValueProvider_);
                initializer.InitializeForDynamicStorageSelection(propertySchema_PersistOnFailures, context, out instanceProvider._PersistOnFailures_MaterializedValue_, out instanceProvider._PersistOnFailures_ValueProvider_);
                initializer.InitializeForDynamicStorageSelection(propertySchema_AlwaysRefreshOnHit, context, out instanceProvider._AlwaysRefreshOnHit_MaterializedValue_, out instanceProvider._AlwaysRefreshOnHit_ValueProvider_);
                return instanceProvider;
            };

            CreateTypeImplementation(
                "DynamicStorageSelection",
                "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces",
                typeSchema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeImplementationKind.DynamicStorageSelection,
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_ICmsCacheConfig_Implementation_),
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_ICmsCacheConfig_DataAccessor_),
                builderCallback_DynamicStorageSelection);

            global::Microsoft.Search.Platform.Parallax.Core.Schema.InstanceProviderBuilder builderCallback_DataOnly = delegate(global::System.Collections.Generic.ICollection<global::Microsoft.Search.Platform.Parallax.Core.Model.VariantFilter> context, global::Microsoft.Search.Platform.Parallax.Core.Schema.IObjectDataInitializer initializer)
            {
                var instanceProvider = new global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_ICmsCacheConfig_Implementation_();
                initializer.InitializeForDataOnly(propertySchema_Name, context, out instanceProvider._Name_MaterializedValue_);
                initializer.InitializeForDataOnly(propertySchema_MemoryLimitMegaBytes, context, out instanceProvider._MemoryLimitMegaBytes_MaterializedValue_);
                initializer.InitializeForDataOnly(propertySchema_PhysicalMemoryLimitPercentage, context, out instanceProvider._PhysicalMemoryLimitPercentage_MaterializedValue_);
                initializer.InitializeForDataOnly(propertySchema_PollingIntervalTimeSpan, context, out instanceProvider._PollingIntervalTimeSpan_MaterializedValue_);
                initializer.InitializeForDataOnly(propertySchema_ExecuteSourceGetterInBackground, context, out instanceProvider._ExecuteSourceGetterInBackground_MaterializedValue_);
                initializer.InitializeForDataOnly(propertySchema_PersistOnFailures, context, out instanceProvider._PersistOnFailures_MaterializedValue_);
                initializer.InitializeForDataOnly(propertySchema_AlwaysRefreshOnHit, context, out instanceProvider._AlwaysRefreshOnHit_MaterializedValue_);
                return instanceProvider;
            };

            CreateTypeImplementation(
                "DataOnly",
                "Implementation with a fully materialized and context-unaware state initialized at data source loading time",
                typeSchema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeImplementationKind.DataOnly,
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_ICmsCacheConfig_Implementation_),
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_ICmsCacheConfig_Implementation_),
                builderCallback_DataOnly);
        }

        private static void Register_Microsoft_PrivacyServices_UX_Configuration_IFlightingConfig(global::Microsoft.Search.Platform.Parallax.Core.Schema.Schema schema)
        {
            var typeSchema = CreateTypeSchema<global::Microsoft.PrivacyServices.UX.Configuration.IFlightingConfig>(
                string.Empty,
                schema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeMultiplicityKind.Unrestricted,
                null);

            var propertySchema_Environment = CreateDataPropertySchema(
                typeSchema,
                "Environment",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.IFlightingConfig, string>(vo => vo.@Environment, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                true,
                null,
                null);

            var propertySchema_ApiEndpoint = CreateDataPropertySchema(
                typeSchema,
                "ApiEndpoint",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.IFlightingConfig, string>(vo => vo.@ApiEndpoint, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                true,
                null,
                null);

            global::Microsoft.Search.Platform.Parallax.Core.Schema.InstanceProviderBuilder builderCallback_DynamicStorageSelection = delegate(global::System.Collections.Generic.ICollection<global::Microsoft.Search.Platform.Parallax.Core.Model.VariantFilter> context, global::Microsoft.Search.Platform.Parallax.Core.Schema.IObjectDataInitializer initializer)
            {
                var instanceProvider = new global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IFlightingConfig_DataAccessor_();
                initializer.InitializeForDynamicStorageSelection(propertySchema_Environment, context, out instanceProvider._Environment_MaterializedValue_, out instanceProvider._Environment_ValueProvider_);
                initializer.InitializeForDynamicStorageSelection(propertySchema_ApiEndpoint, context, out instanceProvider._ApiEndpoint_MaterializedValue_, out instanceProvider._ApiEndpoint_ValueProvider_);
                return instanceProvider;
            };

            CreateTypeImplementation(
                "DynamicStorageSelection",
                "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces",
                typeSchema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeImplementationKind.DynamicStorageSelection,
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IFlightingConfig_Implementation_),
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IFlightingConfig_DataAccessor_),
                builderCallback_DynamicStorageSelection);

            global::Microsoft.Search.Platform.Parallax.Core.Schema.InstanceProviderBuilder builderCallback_DataOnly = delegate(global::System.Collections.Generic.ICollection<global::Microsoft.Search.Platform.Parallax.Core.Model.VariantFilter> context, global::Microsoft.Search.Platform.Parallax.Core.Schema.IObjectDataInitializer initializer)
            {
                var instanceProvider = new global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IFlightingConfig_Implementation_();
                initializer.InitializeForDataOnly(propertySchema_Environment, context, out instanceProvider._Environment_MaterializedValue_);
                initializer.InitializeForDataOnly(propertySchema_ApiEndpoint, context, out instanceProvider._ApiEndpoint_MaterializedValue_);
                return instanceProvider;
            };

            CreateTypeImplementation(
                "DataOnly",
                "Implementation with a fully materialized and context-unaware state initialized at data source loading time",
                typeSchema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeImplementationKind.DataOnly,
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IFlightingConfig_Implementation_),
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IFlightingConfig_Implementation_),
                builderCallback_DataOnly);
        }

        private static void Register_Microsoft_PrivacyServices_UX_Configuration_IMocksConfig(global::Microsoft.Search.Platform.Parallax.Core.Schema.Schema schema)
        {
            var typeSchema = CreateTypeSchema<global::Microsoft.PrivacyServices.UX.Configuration.IMocksConfig>(
                string.Empty,
                schema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeMultiplicityKind.Unrestricted,
                null);

            var propertySchema_AllowMocks = CreateDataPropertySchema(
                typeSchema,
                "AllowMocks",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.IMocksConfig, bool>(vo => vo.@AllowMocks, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                false,
                null,
                null);

            global::Microsoft.Search.Platform.Parallax.Core.Schema.InstanceProviderBuilder builderCallback_DynamicStorageSelection = delegate(global::System.Collections.Generic.ICollection<global::Microsoft.Search.Platform.Parallax.Core.Model.VariantFilter> context, global::Microsoft.Search.Platform.Parallax.Core.Schema.IObjectDataInitializer initializer)
            {
                var instanceProvider = new global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IMocksConfig_DataAccessor_();
                initializer.InitializeForDynamicStorageSelection(propertySchema_AllowMocks, context, out instanceProvider._AllowMocks_MaterializedValue_, out instanceProvider._AllowMocks_ValueProvider_);
                return instanceProvider;
            };

            CreateTypeImplementation(
                "DynamicStorageSelection",
                "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces",
                typeSchema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeImplementationKind.DynamicStorageSelection,
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IMocksConfig_Implementation_),
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IMocksConfig_DataAccessor_),
                builderCallback_DynamicStorageSelection);

            global::Microsoft.Search.Platform.Parallax.Core.Schema.InstanceProviderBuilder builderCallback_DataOnly = delegate(global::System.Collections.Generic.ICollection<global::Microsoft.Search.Platform.Parallax.Core.Model.VariantFilter> context, global::Microsoft.Search.Platform.Parallax.Core.Schema.IObjectDataInitializer initializer)
            {
                var instanceProvider = new global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IMocksConfig_Implementation_();
                initializer.InitializeForDataOnly(propertySchema_AllowMocks, context, out instanceProvider._AllowMocks_MaterializedValue_);
                return instanceProvider;
            };

            CreateTypeImplementation(
                "DataOnly",
                "Implementation with a fully materialized and context-unaware state initialized at data source loading time",
                typeSchema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeImplementationKind.DataOnly,
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IMocksConfig_Implementation_),
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IMocksConfig_Implementation_),
                builderCallback_DataOnly);
        }

        private static void Register_Microsoft_PrivacyServices_UX_Configuration_INgpLockdownConfig(global::Microsoft.Search.Platform.Parallax.Core.Schema.Schema schema)
        {
            var typeSchema = CreateTypeSchema<global::Microsoft.PrivacyServices.UX.Configuration.INgpLockdownConfig>(
                string.Empty,
                schema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeMultiplicityKind.Unrestricted,
                null);

            var propertySchema_Kind = CreateDataPropertySchema(
                typeSchema,
                "Kind",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.INgpLockdownConfig, global::Microsoft.PrivacyServices.UX.Configuration.NgpLockdownKind>(vo => vo.@Kind, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                true,
                null,
                null);

            var propertySchema_StartedUtc = CreateDataPropertySchema(
                typeSchema,
                "StartedUtc",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.INgpLockdownConfig, string>(vo => vo.@StartedUtc, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                true,
                null,
                null);

            var propertySchema_EndedUtc = CreateDataPropertySchema(
                typeSchema,
                "EndedUtc",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.INgpLockdownConfig, string>(vo => vo.@EndedUtc, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                true,
                null,
                null);

            global::Microsoft.Search.Platform.Parallax.Core.Schema.InstanceProviderBuilder builderCallback_DynamicStorageSelection = delegate(global::System.Collections.Generic.ICollection<global::Microsoft.Search.Platform.Parallax.Core.Model.VariantFilter> context, global::Microsoft.Search.Platform.Parallax.Core.Schema.IObjectDataInitializer initializer)
            {
                var instanceProvider = new global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_INgpLockdownConfig_DataAccessor_();
                initializer.InitializeForDynamicStorageSelection(propertySchema_Kind, context, out instanceProvider._Kind_MaterializedValue_, out instanceProvider._Kind_ValueProvider_);
                initializer.InitializeForDynamicStorageSelection(propertySchema_StartedUtc, context, out instanceProvider._StartedUtc_MaterializedValue_, out instanceProvider._StartedUtc_ValueProvider_);
                initializer.InitializeForDynamicStorageSelection(propertySchema_EndedUtc, context, out instanceProvider._EndedUtc_MaterializedValue_, out instanceProvider._EndedUtc_ValueProvider_);
                return instanceProvider;
            };

            CreateTypeImplementation(
                "DynamicStorageSelection",
                "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces",
                typeSchema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeImplementationKind.DynamicStorageSelection,
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_INgpLockdownConfig_Implementation_),
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_INgpLockdownConfig_DataAccessor_),
                builderCallback_DynamicStorageSelection);

            global::Microsoft.Search.Platform.Parallax.Core.Schema.InstanceProviderBuilder builderCallback_DataOnly = delegate(global::System.Collections.Generic.ICollection<global::Microsoft.Search.Platform.Parallax.Core.Model.VariantFilter> context, global::Microsoft.Search.Platform.Parallax.Core.Schema.IObjectDataInitializer initializer)
            {
                var instanceProvider = new global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_INgpLockdownConfig_Implementation_();
                initializer.InitializeForDataOnly(propertySchema_Kind, context, out instanceProvider._Kind_MaterializedValue_);
                initializer.InitializeForDataOnly(propertySchema_StartedUtc, context, out instanceProvider._StartedUtc_MaterializedValue_);
                initializer.InitializeForDataOnly(propertySchema_EndedUtc, context, out instanceProvider._EndedUtc_MaterializedValue_);
                return instanceProvider;
            };

            CreateTypeImplementation(
                "DataOnly",
                "Implementation with a fully materialized and context-unaware state initialized at data source loading time",
                typeSchema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeImplementationKind.DataOnly,
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_INgpLockdownConfig_Implementation_),
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_INgpLockdownConfig_Implementation_),
                builderCallback_DataOnly);
        }

        private static void Register_Microsoft_PrivacyServices_UX_Configuration_IPdmsClientConfig(global::Microsoft.Search.Platform.Parallax.Core.Schema.Schema schema)
        {
            var typeSchema = CreateTypeSchema<global::Microsoft.PrivacyServices.UX.Configuration.IPdmsClientConfig>(
                string.Empty,
                schema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeMultiplicityKind.Unrestricted,
                null);

            var propertySchema_Endpoint = CreateDataPropertySchema(
                typeSchema,
                "Endpoint",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.IPdmsClientConfig, string>(vo => vo.@Endpoint, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                false,
                null,
                null);

            global::Microsoft.Search.Platform.Parallax.Core.Schema.InstanceProviderBuilder builderCallback_DynamicStorageSelection = delegate(global::System.Collections.Generic.ICollection<global::Microsoft.Search.Platform.Parallax.Core.Model.VariantFilter> context, global::Microsoft.Search.Platform.Parallax.Core.Schema.IObjectDataInitializer initializer)
            {
                var instanceProvider = new global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IPdmsClientConfig_DataAccessor_();
                initializer.InitializeForDynamicStorageSelection(propertySchema_Endpoint, context, out instanceProvider._Endpoint_MaterializedValue_, out instanceProvider._Endpoint_ValueProvider_);
                return instanceProvider;
            };

            CreateTypeImplementation(
                "DynamicStorageSelection",
                "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces",
                typeSchema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeImplementationKind.DynamicStorageSelection,
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IPdmsClientConfig_Implementation_),
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IPdmsClientConfig_DataAccessor_),
                builderCallback_DynamicStorageSelection);

            global::Microsoft.Search.Platform.Parallax.Core.Schema.InstanceProviderBuilder builderCallback_DataOnly = delegate(global::System.Collections.Generic.ICollection<global::Microsoft.Search.Platform.Parallax.Core.Model.VariantFilter> context, global::Microsoft.Search.Platform.Parallax.Core.Schema.IObjectDataInitializer initializer)
            {
                var instanceProvider = new global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IPdmsClientConfig_Implementation_();
                initializer.InitializeForDataOnly(propertySchema_Endpoint, context, out instanceProvider._Endpoint_MaterializedValue_);
                return instanceProvider;
            };

            CreateTypeImplementation(
                "DataOnly",
                "Implementation with a fully materialized and context-unaware state initialized at data source loading time",
                typeSchema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeImplementationKind.DataOnly,
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IPdmsClientConfig_Implementation_),
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IPdmsClientConfig_Implementation_),
                builderCallback_DataOnly);
        }

        private static void Register_Microsoft_PrivacyServices_UX_Configuration_IPxsClientConfig(global::Microsoft.Search.Platform.Parallax.Core.Schema.Schema schema)
        {
            var typeSchema = CreateTypeSchema<global::Microsoft.PrivacyServices.UX.Configuration.IPxsClientConfig>(
                string.Empty,
                schema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeMultiplicityKind.Unrestricted,
                null);

            var propertySchema_ApiEndpoint = CreateDataPropertySchema(
                typeSchema,
                "ApiEndpoint",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.IPxsClientConfig, string>(vo => vo.@ApiEndpoint, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                false,
                null,
                null);

            var propertySchema_ResourceId = CreateDataPropertySchema(
                typeSchema,
                "ResourceId",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.IPxsClientConfig, string>(vo => vo.@ResourceId, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                false,
                null,
                null);

            global::Microsoft.Search.Platform.Parallax.Core.Schema.InstanceProviderBuilder builderCallback_DynamicStorageSelection = delegate(global::System.Collections.Generic.ICollection<global::Microsoft.Search.Platform.Parallax.Core.Model.VariantFilter> context, global::Microsoft.Search.Platform.Parallax.Core.Schema.IObjectDataInitializer initializer)
            {
                var instanceProvider = new global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IPxsClientConfig_DataAccessor_();
                initializer.InitializeForDynamicStorageSelection(propertySchema_ApiEndpoint, context, out instanceProvider._ApiEndpoint_MaterializedValue_, out instanceProvider._ApiEndpoint_ValueProvider_);
                initializer.InitializeForDynamicStorageSelection(propertySchema_ResourceId, context, out instanceProvider._ResourceId_MaterializedValue_, out instanceProvider._ResourceId_ValueProvider_);
                return instanceProvider;
            };

            CreateTypeImplementation(
                "DynamicStorageSelection",
                "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces",
                typeSchema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeImplementationKind.DynamicStorageSelection,
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IPxsClientConfig_Implementation_),
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IPxsClientConfig_DataAccessor_),
                builderCallback_DynamicStorageSelection);

            global::Microsoft.Search.Platform.Parallax.Core.Schema.InstanceProviderBuilder builderCallback_DataOnly = delegate(global::System.Collections.Generic.ICollection<global::Microsoft.Search.Platform.Parallax.Core.Model.VariantFilter> context, global::Microsoft.Search.Platform.Parallax.Core.Schema.IObjectDataInitializer initializer)
            {
                var instanceProvider = new global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IPxsClientConfig_Implementation_();
                initializer.InitializeForDataOnly(propertySchema_ApiEndpoint, context, out instanceProvider._ApiEndpoint_MaterializedValue_);
                initializer.InitializeForDataOnly(propertySchema_ResourceId, context, out instanceProvider._ResourceId_MaterializedValue_);
                return instanceProvider;
            };

            CreateTypeImplementation(
                "DataOnly",
                "Implementation with a fully materialized and context-unaware state initialized at data source loading time",
                typeSchema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeImplementationKind.DataOnly,
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IPxsClientConfig_Implementation_),
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IPxsClientConfig_Implementation_),
                builderCallback_DataOnly);
        }

        private static void Register_Microsoft_PrivacyServices_UX_Configuration_IRoleBasedAuthConfig(global::Microsoft.Search.Platform.Parallax.Core.Schema.Schema schema)
        {
            var typeSchema = CreateTypeSchema<global::Microsoft.PrivacyServices.UX.Configuration.IRoleBasedAuthConfig>(
                string.Empty,
                schema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeMultiplicityKind.Unrestricted,
                null);

            var propertySchema_ManualRequests = CreateDataPropertySchema(
                typeSchema,
                "ManualRequests",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.IRoleBasedAuthConfig, string>(vo => vo.@ManualRequests, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                false,
                null,
                null);

            var propertySchema_VariantAdmins = CreateDataPropertySchema(
                typeSchema,
                "VariantAdmins",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.IRoleBasedAuthConfig, string>(vo => vo.@VariantAdmins, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                false,
                null,
                null);

            var propertySchema_IncidentManager = CreateDataPropertySchema(
                typeSchema,
                "IncidentManager",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.IRoleBasedAuthConfig, string>(vo => vo.@IncidentManager, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                false,
                null,
                null);

            global::Microsoft.Search.Platform.Parallax.Core.Schema.InstanceProviderBuilder builderCallback_DynamicStorageSelection = delegate(global::System.Collections.Generic.ICollection<global::Microsoft.Search.Platform.Parallax.Core.Model.VariantFilter> context, global::Microsoft.Search.Platform.Parallax.Core.Schema.IObjectDataInitializer initializer)
            {
                var instanceProvider = new global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IRoleBasedAuthConfig_DataAccessor_();
                initializer.InitializeForDynamicStorageSelection(propertySchema_ManualRequests, context, out instanceProvider._ManualRequests_MaterializedValue_, out instanceProvider._ManualRequests_ValueProvider_);
                initializer.InitializeForDynamicStorageSelection(propertySchema_VariantAdmins, context, out instanceProvider._VariantAdmins_MaterializedValue_, out instanceProvider._VariantAdmins_ValueProvider_);
                initializer.InitializeForDynamicStorageSelection(propertySchema_IncidentManager, context, out instanceProvider._IncidentManager_MaterializedValue_, out instanceProvider._IncidentManager_ValueProvider_);
                return instanceProvider;
            };

            CreateTypeImplementation(
                "DynamicStorageSelection",
                "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces",
                typeSchema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeImplementationKind.DynamicStorageSelection,
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IRoleBasedAuthConfig_Implementation_),
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IRoleBasedAuthConfig_DataAccessor_),
                builderCallback_DynamicStorageSelection);

            global::Microsoft.Search.Platform.Parallax.Core.Schema.InstanceProviderBuilder builderCallback_DataOnly = delegate(global::System.Collections.Generic.ICollection<global::Microsoft.Search.Platform.Parallax.Core.Model.VariantFilter> context, global::Microsoft.Search.Platform.Parallax.Core.Schema.IObjectDataInitializer initializer)
            {
                var instanceProvider = new global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IRoleBasedAuthConfig_Implementation_();
                initializer.InitializeForDataOnly(propertySchema_ManualRequests, context, out instanceProvider._ManualRequests_MaterializedValue_);
                initializer.InitializeForDataOnly(propertySchema_VariantAdmins, context, out instanceProvider._VariantAdmins_MaterializedValue_);
                initializer.InitializeForDataOnly(propertySchema_IncidentManager, context, out instanceProvider._IncidentManager_MaterializedValue_);
                return instanceProvider;
            };

            CreateTypeImplementation(
                "DataOnly",
                "Implementation with a fully materialized and context-unaware state initialized at data source loading time",
                typeSchema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeImplementationKind.DataOnly,
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IRoleBasedAuthConfig_Implementation_),
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IRoleBasedAuthConfig_Implementation_),
                builderCallback_DataOnly);
        }

        private static void Register_Microsoft_PrivacyServices_UX_Configuration_IServiceTreeClientConfig(global::Microsoft.Search.Platform.Parallax.Core.Schema.Schema schema)
        {
            var typeSchema = CreateTypeSchema<global::Microsoft.PrivacyServices.UX.Configuration.IServiceTreeClientConfig>(
                string.Empty,
                schema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeMultiplicityKind.Unrestricted,
                null);

            var propertySchema_ApiEndpoint = CreateDataPropertySchema(
                typeSchema,
                "ApiEndpoint",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.IServiceTreeClientConfig, string>(vo => vo.@ApiEndpoint, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                false,
                null,
                null);

            global::Microsoft.Search.Platform.Parallax.Core.Schema.InstanceProviderBuilder builderCallback_DynamicStorageSelection = delegate(global::System.Collections.Generic.ICollection<global::Microsoft.Search.Platform.Parallax.Core.Model.VariantFilter> context, global::Microsoft.Search.Platform.Parallax.Core.Schema.IObjectDataInitializer initializer)
            {
                var instanceProvider = new global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IServiceTreeClientConfig_DataAccessor_();
                initializer.InitializeForDynamicStorageSelection(propertySchema_ApiEndpoint, context, out instanceProvider._ApiEndpoint_MaterializedValue_, out instanceProvider._ApiEndpoint_ValueProvider_);
                return instanceProvider;
            };

            CreateTypeImplementation(
                "DynamicStorageSelection",
                "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces",
                typeSchema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeImplementationKind.DynamicStorageSelection,
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IServiceTreeClientConfig_Implementation_),
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IServiceTreeClientConfig_DataAccessor_),
                builderCallback_DynamicStorageSelection);

            global::Microsoft.Search.Platform.Parallax.Core.Schema.InstanceProviderBuilder builderCallback_DataOnly = delegate(global::System.Collections.Generic.ICollection<global::Microsoft.Search.Platform.Parallax.Core.Model.VariantFilter> context, global::Microsoft.Search.Platform.Parallax.Core.Schema.IObjectDataInitializer initializer)
            {
                var instanceProvider = new global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IServiceTreeClientConfig_Implementation_();
                initializer.InitializeForDataOnly(propertySchema_ApiEndpoint, context, out instanceProvider._ApiEndpoint_MaterializedValue_);
                return instanceProvider;
            };

            CreateTypeImplementation(
                "DataOnly",
                "Implementation with a fully materialized and context-unaware state initialized at data source loading time",
                typeSchema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeImplementationKind.DataOnly,
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IServiceTreeClientConfig_Implementation_),
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IServiceTreeClientConfig_Implementation_),
                builderCallback_DataOnly);
        }

        private static void Register_Microsoft_PrivacyServices_UX_Configuration_IUhfClientConfig(global::Microsoft.Search.Platform.Parallax.Core.Schema.Schema schema)
        {
            var typeSchema = CreateTypeSchema<global::Microsoft.PrivacyServices.UX.Configuration.IUhfClientConfig>(
                string.Empty,
                schema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeMultiplicityKind.Unrestricted,
                null);

            var propertySchema_ServiceEndpoint = CreateDataPropertySchema(
                typeSchema,
                "ServiceEndpoint",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.IUhfClientConfig, string>(vo => vo.@ServiceEndpoint, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                false,
                null,
                null);

            var propertySchema_PartnerId = CreateDataPropertySchema(
                typeSchema,
                "PartnerId",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.IUhfClientConfig, string>(vo => vo.@PartnerId, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                false,
                null,
                null);

            var propertySchema_HeaderId = CreateDataPropertySchema(
                typeSchema,
                "HeaderId",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.IUhfClientConfig, string>(vo => vo.@HeaderId, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                false,
                null,
                null);

            var propertySchema_FooterId = CreateDataPropertySchema(
                typeSchema,
                "FooterId",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.IUhfClientConfig, string>(vo => vo.@FooterId, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                false,
                null,
                null);

            var propertySchema_UserAgent = CreateDataPropertySchema(
                typeSchema,
                "UserAgent",
                string.Empty,
                new global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.ConcretePrimitiveScalarInfo<global::Microsoft.PrivacyServices.UX.Configuration.IUhfClientConfig, string>(vo => vo.@UserAgent, null, null, null, global::Microsoft.Search.Platform.Parallax.Core.Schema.Value.PropertyValueUniquenessRule.Unrestricted),
                false,
                null,
                null);

            global::Microsoft.Search.Platform.Parallax.Core.Schema.InstanceProviderBuilder builderCallback_DynamicStorageSelection = delegate(global::System.Collections.Generic.ICollection<global::Microsoft.Search.Platform.Parallax.Core.Model.VariantFilter> context, global::Microsoft.Search.Platform.Parallax.Core.Schema.IObjectDataInitializer initializer)
            {
                var instanceProvider = new global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IUhfClientConfig_DataAccessor_();
                initializer.InitializeForDynamicStorageSelection(propertySchema_ServiceEndpoint, context, out instanceProvider._ServiceEndpoint_MaterializedValue_, out instanceProvider._ServiceEndpoint_ValueProvider_);
                initializer.InitializeForDynamicStorageSelection(propertySchema_PartnerId, context, out instanceProvider._PartnerId_MaterializedValue_, out instanceProvider._PartnerId_ValueProvider_);
                initializer.InitializeForDynamicStorageSelection(propertySchema_HeaderId, context, out instanceProvider._HeaderId_MaterializedValue_, out instanceProvider._HeaderId_ValueProvider_);
                initializer.InitializeForDynamicStorageSelection(propertySchema_FooterId, context, out instanceProvider._FooterId_MaterializedValue_, out instanceProvider._FooterId_ValueProvider_);
                initializer.InitializeForDynamicStorageSelection(propertySchema_UserAgent, context, out instanceProvider._UserAgent_MaterializedValue_, out instanceProvider._UserAgent_ValueProvider_);
                return instanceProvider;
            };

            CreateTypeImplementation(
                "DynamicStorageSelection",
                "Hybrid implementation which dynamically chooses value storage and retrieval based on sizes of variant spaces",
                typeSchema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeImplementationKind.DynamicStorageSelection,
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IUhfClientConfig_Implementation_),
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DynamicStorageSelection_IUhfClientConfig_DataAccessor_),
                builderCallback_DynamicStorageSelection);

            global::Microsoft.Search.Platform.Parallax.Core.Schema.InstanceProviderBuilder builderCallback_DataOnly = delegate(global::System.Collections.Generic.ICollection<global::Microsoft.Search.Platform.Parallax.Core.Model.VariantFilter> context, global::Microsoft.Search.Platform.Parallax.Core.Schema.IObjectDataInitializer initializer)
            {
                var instanceProvider = new global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IUhfClientConfig_Implementation_();
                initializer.InitializeForDataOnly(propertySchema_ServiceEndpoint, context, out instanceProvider._ServiceEndpoint_MaterializedValue_);
                initializer.InitializeForDataOnly(propertySchema_PartnerId, context, out instanceProvider._PartnerId_MaterializedValue_);
                initializer.InitializeForDataOnly(propertySchema_HeaderId, context, out instanceProvider._HeaderId_MaterializedValue_);
                initializer.InitializeForDataOnly(propertySchema_FooterId, context, out instanceProvider._FooterId_MaterializedValue_);
                initializer.InitializeForDataOnly(propertySchema_UserAgent, context, out instanceProvider._UserAgent_MaterializedValue_);
                return instanceProvider;
            };

            CreateTypeImplementation(
                "DataOnly",
                "Implementation with a fully materialized and context-unaware state initialized at data source loading time",
                typeSchema,
                global::Microsoft.Search.Platform.Parallax.Core.Schema.TypeImplementationKind.DataOnly,
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IUhfClientConfig_Implementation_),
                typeof(global::Microsoft.PrivacyServices.UX.Configuration._DataOnly_IUhfClientConfig_Implementation_),
                builderCallback_DataOnly);
        }

    }
}
