//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=4.8.3928.0.
// 
namespace Microsoft.Membership.MemberServices.PrivacyAdapters.MsaIdentityService {
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CredentialServiceAPISoapServerSoap", Namespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(string[]))]
    public partial class CredentialServiceAPISoapServer : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private PPSoapHeader_wrapper pPSoapHeaderField;
        
        private tagWSSECURITYHEADER wSSecurityHeaderField;
        
        private System.Threading.SendOrPostCallback GetPassportIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCredentialInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCredentialOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCredentialOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCredentialOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenameCredentialOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnblockCredentialOperationCompleted;
        
        private System.Threading.SendOrPostCallback BlockCredentialOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnumCredentialsByNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnumCredentialsByNetIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnumCredentialsByNamespaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCertificateAssociationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCertificateAssociationOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAllCertificateAssociationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSigninNamesForNetIDsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ForceCredentialRenameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNetIDsForSigninNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryCredentialChangesOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryCredentialHistoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryCredentialHistoryByNetIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryNetIDHistoryBySigninNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuggestAlternateMemberNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSigninNamesAndCIDsForNetIDsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNetIDsAndCIDsForSigninNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckAvailableSigninNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckRenameRulesOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenameCredentialExOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReserveNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddLinkAccountsOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeLinkAccountsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLinkAccountMembersOperationCompleted;
        
        private System.Threading.SendOrPostCallback AssociateCertificateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisassociateCertificateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCredentialExOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateAliasOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateAliasOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteAliasOperationCompleted;
        
        private System.Threading.SendOrPostCallback RenameAliasOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAliasesForAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountForAliasOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddToReputationScoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback OverrideReputationScoreOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReputationScoreDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnumerateDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnumerateAssociationsForDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AssociateDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisassociateDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDevicePropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryDevicePropertiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertCredentialOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryNotificationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConsumeNotificationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddProofOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConfirmProofOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteProofOperationCompleted;
        
        private System.Threading.SendOrPostCallback LostProofsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserProofStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetAccountProtectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountProtectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserPolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserPolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateChannelStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddFamiliarLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReportCompromiseOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetEDUMigrationDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDevicesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateApplicationPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReadApplicationPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteApplicationPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetUserNotificationStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback FlagActivityOperationCompleted;
        
        private System.Threading.SendOrPostCallback MakeAliasPrimaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryAccountNamesOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloseAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback RecoverAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateApproverOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveApproverOperationCompleted;
        
        private System.Threading.SendOrPostCallback MessageDispatcherCallbackOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestMessageOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnumerateDeviceExOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckCredentialPolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIPLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback QueryAccountNamesExOperationCompleted;
        
        private System.Threading.SendOrPostCallback DisassociateDeviceExOperationCompleted;
        
        private System.Threading.SendOrPostCallback MoveAliasOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProvisionNetIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAccountsForProofOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetIDPAccessTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateIDPBindStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ProvisionDeviceOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGdprVerifierOperationCompleted;
        
        private System.Threading.SendOrPostCallback EnumNextGenCredentialsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveNextGenCredentialOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplayGdprVerifierOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddNextGenCredentialOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateAlias2OperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateAgeOutPolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemovePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSLTOperationCompleted;
        
        /// <remarks/>
        public CredentialServiceAPISoapServer() {
            this.Url = "https://api.login.live-int.com/PPSACredential.srf";
        }
        
        public PPSoapHeader_wrapper PPSoapHeader {
            get {
                return this.pPSoapHeaderField;
            }
            set {
                this.pPSoapHeaderField = value;
            }
        }
        
        public tagWSSECURITYHEADER WSSecurityHeader {
            get {
                return this.wSSecurityHeaderField;
            }
            set {
                this.wSSecurityHeaderField = value;
            }
        }
        
        /// <remarks/>
        public event GetPassportIDCompletedEventHandler GetPassportIDCompleted;
        
        /// <remarks/>
        public event GetCredentialInfoCompletedEventHandler GetCredentialInfoCompleted;
        
        /// <remarks/>
        public event AddCredentialCompletedEventHandler AddCredentialCompleted;
        
        /// <remarks/>
        public event UpdateCredentialCompletedEventHandler UpdateCredentialCompleted;
        
        /// <remarks/>
        public event DeleteCredentialCompletedEventHandler DeleteCredentialCompleted;
        
        /// <remarks/>
        public event RenameCredentialCompletedEventHandler RenameCredentialCompleted;
        
        /// <remarks/>
        public event UnblockCredentialCompletedEventHandler UnblockCredentialCompleted;
        
        /// <remarks/>
        public event BlockCredentialCompletedEventHandler BlockCredentialCompleted;
        
        /// <remarks/>
        public event EnumCredentialsByNameCompletedEventHandler EnumCredentialsByNameCompleted;
        
        /// <remarks/>
        public event EnumCredentialsByNetIDCompletedEventHandler EnumCredentialsByNetIDCompleted;
        
        /// <remarks/>
        public event EnumCredentialsByNamespaceCompletedEventHandler EnumCredentialsByNamespaceCompleted;
        
        /// <remarks/>
        public event GetCertificateAssociationsCompletedEventHandler GetCertificateAssociationsCompleted;
        
        /// <remarks/>
        public event DeleteCertificateAssociationCompletedEventHandler DeleteCertificateAssociationCompleted;
        
        /// <remarks/>
        public event DeleteAllCertificateAssociationsCompletedEventHandler DeleteAllCertificateAssociationsCompleted;
        
        /// <remarks/>
        public event GetSigninNamesForNetIDsCompletedEventHandler GetSigninNamesForNetIDsCompleted;
        
        /// <remarks/>
        public event ForceCredentialRenameCompletedEventHandler ForceCredentialRenameCompleted;
        
        /// <remarks/>
        public event GetNetIDsForSigninNamesCompletedEventHandler GetNetIDsForSigninNamesCompleted;
        
        /// <remarks/>
        public event QueryCredentialChangesCompletedEventHandler QueryCredentialChangesCompleted;
        
        /// <remarks/>
        public event QueryCredentialHistoryCompletedEventHandler QueryCredentialHistoryCompleted;
        
        /// <remarks/>
        public event QueryCredentialHistoryByNetIDCompletedEventHandler QueryCredentialHistoryByNetIDCompleted;
        
        /// <remarks/>
        public event QueryNetIDHistoryBySigninNameCompletedEventHandler QueryNetIDHistoryBySigninNameCompleted;
        
        /// <remarks/>
        public event SuggestAlternateMemberNamesCompletedEventHandler SuggestAlternateMemberNamesCompleted;
        
        /// <remarks/>
        public event GetSigninNamesAndCIDsForNetIDsCompletedEventHandler GetSigninNamesAndCIDsForNetIDsCompleted;
        
        /// <remarks/>
        public event GetNetIDsAndCIDsForSigninNamesCompletedEventHandler GetNetIDsAndCIDsForSigninNamesCompleted;
        
        /// <remarks/>
        public event CheckAvailableSigninNamesCompletedEventHandler CheckAvailableSigninNamesCompleted;
        
        /// <remarks/>
        public event CheckRenameRulesCompletedEventHandler CheckRenameRulesCompleted;
        
        /// <remarks/>
        public event RenameCredentialExCompletedEventHandler RenameCredentialExCompleted;
        
        /// <remarks/>
        public event ReserveNameCompletedEventHandler ReserveNameCompleted;
        
        /// <remarks/>
        public event AddLinkAccountsCompletedEventHandler AddLinkAccountsCompleted;
        
        /// <remarks/>
        public event DeLinkAccountsCompletedEventHandler DeLinkAccountsCompleted;
        
        /// <remarks/>
        public event GetLinkAccountMembersCompletedEventHandler GetLinkAccountMembersCompleted;
        
        /// <remarks/>
        public event AssociateCertificateCompletedEventHandler AssociateCertificateCompleted;
        
        /// <remarks/>
        public event DisassociateCertificateCompletedEventHandler DisassociateCertificateCompleted;
        
        /// <remarks/>
        public event DeleteCredentialExCompletedEventHandler DeleteCredentialExCompleted;
        
        /// <remarks/>
        public event CreateAliasCompletedEventHandler CreateAliasCompleted;
        
        /// <remarks/>
        public event UpdateAliasCompletedEventHandler UpdateAliasCompleted;
        
        /// <remarks/>
        public event DeleteAliasCompletedEventHandler DeleteAliasCompleted;
        
        /// <remarks/>
        public event RenameAliasCompletedEventHandler RenameAliasCompleted;
        
        /// <remarks/>
        public event GetAliasesForAccountCompletedEventHandler GetAliasesForAccountCompleted;
        
        /// <remarks/>
        public event GetAccountForAliasCompletedEventHandler GetAccountForAliasCompleted;
        
        /// <remarks/>
        public event AddToReputationScoreCompletedEventHandler AddToReputationScoreCompleted;
        
        /// <remarks/>
        public event OverrideReputationScoreCompletedEventHandler OverrideReputationScoreCompleted;
        
        /// <remarks/>
        public event GetReputationScoreDetailsCompletedEventHandler GetReputationScoreDetailsCompleted;
        
        /// <remarks/>
        public event EnumerateDeviceCompletedEventHandler EnumerateDeviceCompleted;
        
        /// <remarks/>
        public event EnumerateAssociationsForDeviceCompletedEventHandler EnumerateAssociationsForDeviceCompleted;
        
        /// <remarks/>
        public event AssociateDeviceCompletedEventHandler AssociateDeviceCompleted;
        
        /// <remarks/>
        public event DisassociateDeviceCompletedEventHandler DisassociateDeviceCompleted;
        
        /// <remarks/>
        public event UpdateDevicePropertiesCompletedEventHandler UpdateDevicePropertiesCompleted;
        
        /// <remarks/>
        public event QueryDevicePropertiesCompletedEventHandler QueryDevicePropertiesCompleted;
        
        /// <remarks/>
        public event ConvertCredentialCompletedEventHandler ConvertCredentialCompleted;
        
        /// <remarks/>
        public event QueryNotificationsCompletedEventHandler QueryNotificationsCompleted;
        
        /// <remarks/>
        public event ConsumeNotificationsCompletedEventHandler ConsumeNotificationsCompleted;
        
        /// <remarks/>
        public event AddProofCompletedEventHandler AddProofCompleted;
        
        /// <remarks/>
        public event ConfirmProofCompletedEventHandler ConfirmProofCompleted;
        
        /// <remarks/>
        public event DeleteProofCompletedEventHandler DeleteProofCompleted;
        
        /// <remarks/>
        public event LostProofsCompletedEventHandler LostProofsCompleted;
        
        /// <remarks/>
        public event GetUserProofStateCompletedEventHandler GetUserProofStateCompleted;
        
        /// <remarks/>
        public event SetAccountProtectionCompletedEventHandler SetAccountProtectionCompleted;
        
        /// <remarks/>
        public event GetAccountProtectionCompletedEventHandler GetAccountProtectionCompleted;
        
        /// <remarks/>
        public event SetUserPolicyCompletedEventHandler SetUserPolicyCompleted;
        
        /// <remarks/>
        public event GetUserPolicyCompletedEventHandler GetUserPolicyCompleted;
        
        /// <remarks/>
        public event UpdateChannelStateCompletedEventHandler UpdateChannelStateCompleted;
        
        /// <remarks/>
        public event AddFamiliarLocationCompletedEventHandler AddFamiliarLocationCompleted;
        
        /// <remarks/>
        public event ReportCompromiseCompletedEventHandler ReportCompromiseCompleted;
        
        /// <remarks/>
        public event GetEDUMigrationDataCompletedEventHandler GetEDUMigrationDataCompleted;
        
        /// <remarks/>
        public event DeleteDevicesCompletedEventHandler DeleteDevicesCompleted;
        
        /// <remarks/>
        public event CreateApplicationPasswordCompletedEventHandler CreateApplicationPasswordCompleted;
        
        /// <remarks/>
        public event ReadApplicationPasswordCompletedEventHandler ReadApplicationPasswordCompleted;
        
        /// <remarks/>
        public event DeleteApplicationPasswordCompletedEventHandler DeleteApplicationPasswordCompleted;
        
        /// <remarks/>
        public event SetUserNotificationStateCompletedEventHandler SetUserNotificationStateCompleted;
        
        /// <remarks/>
        public event FlagActivityCompletedEventHandler FlagActivityCompleted;
        
        /// <remarks/>
        public event MakeAliasPrimaryCompletedEventHandler MakeAliasPrimaryCompleted;
        
        /// <remarks/>
        public event QueryAccountNamesCompletedEventHandler QueryAccountNamesCompleted;
        
        /// <remarks/>
        public event CloseAccountCompletedEventHandler CloseAccountCompleted;
        
        /// <remarks/>
        public event RecoverAccountCompletedEventHandler RecoverAccountCompleted;
        
        /// <remarks/>
        public event UpdateApproverCompletedEventHandler UpdateApproverCompleted;
        
        /// <remarks/>
        public event RemoveApproverCompletedEventHandler RemoveApproverCompleted;
        
        /// <remarks/>
        public event MessageDispatcherCallbackCompletedEventHandler MessageDispatcherCallbackCompleted;
        
        /// <remarks/>
        public event RequestMessageCompletedEventHandler RequestMessageCompleted;
        
        /// <remarks/>
        public event EnumerateDeviceExCompletedEventHandler EnumerateDeviceExCompleted;
        
        /// <remarks/>
        public event CheckCredentialPolicyCompletedEventHandler CheckCredentialPolicyCompleted;
        
        /// <remarks/>
        public event GetIPLocationCompletedEventHandler GetIPLocationCompleted;
        
        /// <remarks/>
        public event QueryAccountNamesExCompletedEventHandler QueryAccountNamesExCompleted;
        
        /// <remarks/>
        public event DisassociateDeviceExCompletedEventHandler DisassociateDeviceExCompleted;
        
        /// <remarks/>
        public event MoveAliasCompletedEventHandler MoveAliasCompleted;
        
        /// <remarks/>
        public event ProvisionNetIDCompletedEventHandler ProvisionNetIDCompleted;
        
        /// <remarks/>
        public event GetAccountsForProofCompletedEventHandler GetAccountsForProofCompleted;
        
        /// <remarks/>
        public event GetIDPAccessTokenCompletedEventHandler GetIDPAccessTokenCompleted;
        
        /// <remarks/>
        public event UpdateIDPBindStateCompletedEventHandler UpdateIDPBindStateCompleted;
        
        /// <remarks/>
        public event ProvisionDeviceCompletedEventHandler ProvisionDeviceCompleted;
        
        /// <remarks/>
        public event GetGdprVerifierCompletedEventHandler GetGdprVerifierCompleted;
        
        /// <remarks/>
        public event EnumNextGenCredentialsCompletedEventHandler EnumNextGenCredentialsCompleted;
        
        /// <remarks/>
        public event RemoveNextGenCredentialCompletedEventHandler RemoveNextGenCredentialCompleted;
        
        /// <remarks/>
        public event ReplayGdprVerifierCompletedEventHandler ReplayGdprVerifierCompleted;
        
        /// <remarks/>
        public event AddNextGenCredentialCompletedEventHandler AddNextGenCredentialCompleted;
        
        /// <remarks/>
        public event CreateAlias2CompletedEventHandler CreateAlias2Completed;
        
        /// <remarks/>
        public event UpdateAgeOutPolicyCompletedEventHandler UpdateAgeOutPolicyCompleted;
        
        /// <remarks/>
        public event RemovePasswordCompletedEventHandler RemovePasswordCompleted;
        
        /// <remarks/>
        public event GetSLTCompletedEventHandler GetSLTCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#GetPassportID", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pPassIDOut")]
        public tagPASSID GetPassportID(tagPASSID PassIDIn) {
            object[] results = this.Invoke("GetPassportID", new object[] {
                        PassIDIn});
            return ((tagPASSID)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPassportID(tagPASSID PassIDIn, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPassportID", new object[] {
                        PassIDIn}, callback, asyncState);
        }
        
        /// <remarks/>
        public tagPASSID EndGetPassportID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((tagPASSID)(results[0]));
        }
        
        /// <remarks/>
        public void GetPassportIDAsync(tagPASSID PassIDIn) {
            this.GetPassportIDAsync(PassIDIn, null);
        }
        
        /// <remarks/>
        public void GetPassportIDAsync(tagPASSID PassIDIn, object userState) {
            if ((this.GetPassportIDOperationCompleted == null)) {
                this.GetPassportIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPassportIDOperationCompleted);
            }
            this.InvokeAsync("GetPassportID", new object[] {
                        PassIDIn}, this.GetPassportIDOperationCompleted, userState);
        }
        
        private void OnGetPassportIDOperationCompleted(object arg) {
            if ((this.GetPassportIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPassportIDCompleted(this, new GetPassportIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#GetCredentialInfo", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrcredXML")]
        public string GetCredentialInfo(tagPASSID PassIDIn, string bstrAttribList) {
            object[] results = this.Invoke("GetCredentialInfo", new object[] {
                        PassIDIn,
                        bstrAttribList});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCredentialInfo(tagPASSID PassIDIn, string bstrAttribList, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCredentialInfo", new object[] {
                        PassIDIn,
                        bstrAttribList}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetCredentialInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCredentialInfoAsync(tagPASSID PassIDIn, string bstrAttribList) {
            this.GetCredentialInfoAsync(PassIDIn, bstrAttribList, null);
        }
        
        /// <remarks/>
        public void GetCredentialInfoAsync(tagPASSID PassIDIn, string bstrAttribList, object userState) {
            if ((this.GetCredentialInfoOperationCompleted == null)) {
                this.GetCredentialInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCredentialInfoOperationCompleted);
            }
            this.InvokeAsync("GetCredentialInfo", new object[] {
                        PassIDIn,
                        bstrAttribList}, this.GetCredentialInfoOperationCompleted, userState);
        }
        
        private void OnGetCredentialInfoOperationCompleted(object arg) {
            if ((this.GetCredentialInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCredentialInfoCompleted(this, new GetCredentialInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#AddCredential", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddCredential(string bstrNamespace, string bstrCredXML, ref string pbstrNetID) {
            object[] results = this.Invoke("AddCredential", new object[] {
                        bstrNamespace,
                        bstrCredXML,
                        pbstrNetID});
            pbstrNetID = ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddCredential(string bstrNamespace, string bstrCredXML, string pbstrNetID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddCredential", new object[] {
                        bstrNamespace,
                        bstrCredXML,
                        pbstrNetID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddCredential(System.IAsyncResult asyncResult, out string pbstrNetID) {
            object[] results = this.EndInvoke(asyncResult);
            pbstrNetID = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddCredentialAsync(string bstrNamespace, string bstrCredXML, string pbstrNetID) {
            this.AddCredentialAsync(bstrNamespace, bstrCredXML, pbstrNetID, null);
        }
        
        /// <remarks/>
        public void AddCredentialAsync(string bstrNamespace, string bstrCredXML, string pbstrNetID, object userState) {
            if ((this.AddCredentialOperationCompleted == null)) {
                this.AddCredentialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCredentialOperationCompleted);
            }
            this.InvokeAsync("AddCredential", new object[] {
                        bstrNamespace,
                        bstrCredXML,
                        pbstrNetID}, this.AddCredentialOperationCompleted, userState);
        }
        
        private void OnAddCredentialOperationCompleted(object arg) {
            if ((this.AddCredentialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCredentialCompleted(this, new AddCredentialCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#UpdateCredential", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateCredential(string bstrCredXML) {
            this.Invoke("UpdateCredential", new object[] {
                        bstrCredXML});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateCredential(string bstrCredXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateCredential", new object[] {
                        bstrCredXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateCredential(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateCredentialAsync(string bstrCredXML) {
            this.UpdateCredentialAsync(bstrCredXML, null);
        }
        
        /// <remarks/>
        public void UpdateCredentialAsync(string bstrCredXML, object userState) {
            if ((this.UpdateCredentialOperationCompleted == null)) {
                this.UpdateCredentialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCredentialOperationCompleted);
            }
            this.InvokeAsync("UpdateCredential", new object[] {
                        bstrCredXML}, this.UpdateCredentialOperationCompleted, userState);
        }
        
        private void OnUpdateCredentialOperationCompleted(object arg) {
            if ((this.UpdateCredentialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCredentialCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#DeleteCredential", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteCredential(tagPASSID PassID) {
            this.Invoke("DeleteCredential", new object[] {
                        PassID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteCredential(tagPASSID PassID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteCredential", new object[] {
                        PassID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteCredential(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteCredentialAsync(tagPASSID PassID) {
            this.DeleteCredentialAsync(PassID, null);
        }
        
        /// <remarks/>
        public void DeleteCredentialAsync(tagPASSID PassID, object userState) {
            if ((this.DeleteCredentialOperationCompleted == null)) {
                this.DeleteCredentialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCredentialOperationCompleted);
            }
            this.InvokeAsync("DeleteCredential", new object[] {
                        PassID}, this.DeleteCredentialOperationCompleted, userState);
        }
        
        private void OnDeleteCredentialOperationCompleted(object arg) {
            if ((this.DeleteCredentialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCredentialCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#RenameCredential", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RenameCredential(tagPASSID PassIDIn, string bstrnewCredName) {
            this.Invoke("RenameCredential", new object[] {
                        PassIDIn,
                        bstrnewCredName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRenameCredential(tagPASSID PassIDIn, string bstrnewCredName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RenameCredential", new object[] {
                        PassIDIn,
                        bstrnewCredName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRenameCredential(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RenameCredentialAsync(tagPASSID PassIDIn, string bstrnewCredName) {
            this.RenameCredentialAsync(PassIDIn, bstrnewCredName, null);
        }
        
        /// <remarks/>
        public void RenameCredentialAsync(tagPASSID PassIDIn, string bstrnewCredName, object userState) {
            if ((this.RenameCredentialOperationCompleted == null)) {
                this.RenameCredentialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameCredentialOperationCompleted);
            }
            this.InvokeAsync("RenameCredential", new object[] {
                        PassIDIn,
                        bstrnewCredName}, this.RenameCredentialOperationCompleted, userState);
        }
        
        private void OnRenameCredentialOperationCompleted(object arg) {
            if ((this.RenameCredentialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenameCredentialCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#UnblockCredential", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UnblockCredential(tagPASSID PassID) {
            this.Invoke("UnblockCredential", new object[] {
                        PassID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUnblockCredential(tagPASSID PassID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UnblockCredential", new object[] {
                        PassID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUnblockCredential(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UnblockCredentialAsync(tagPASSID PassID) {
            this.UnblockCredentialAsync(PassID, null);
        }
        
        /// <remarks/>
        public void UnblockCredentialAsync(tagPASSID PassID, object userState) {
            if ((this.UnblockCredentialOperationCompleted == null)) {
                this.UnblockCredentialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnblockCredentialOperationCompleted);
            }
            this.InvokeAsync("UnblockCredential", new object[] {
                        PassID}, this.UnblockCredentialOperationCompleted, userState);
        }
        
        private void OnUnblockCredentialOperationCompleted(object arg) {
            if ((this.UnblockCredentialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnblockCredentialCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#BlockCredential", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void BlockCredential(tagPASSID PassID) {
            this.Invoke("BlockCredential", new object[] {
                        PassID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginBlockCredential(tagPASSID PassID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("BlockCredential", new object[] {
                        PassID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndBlockCredential(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void BlockCredentialAsync(tagPASSID PassID) {
            this.BlockCredentialAsync(PassID, null);
        }
        
        /// <remarks/>
        public void BlockCredentialAsync(tagPASSID PassID, object userState) {
            if ((this.BlockCredentialOperationCompleted == null)) {
                this.BlockCredentialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBlockCredentialOperationCompleted);
            }
            this.InvokeAsync("BlockCredential", new object[] {
                        PassID}, this.BlockCredentialOperationCompleted, userState);
        }
        
        private void OnBlockCredentialOperationCompleted(object arg) {
            if ((this.BlockCredentialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BlockCredentialCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#EnumCredentialsByName", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrCredXML")]
        public string EnumCredentialsByName(string bstrCredName, string bstrAttribList) {
            object[] results = this.Invoke("EnumCredentialsByName", new object[] {
                        bstrCredName,
                        bstrAttribList});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumCredentialsByName(string bstrCredName, string bstrAttribList, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumCredentialsByName", new object[] {
                        bstrCredName,
                        bstrAttribList}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndEnumCredentialsByName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EnumCredentialsByNameAsync(string bstrCredName, string bstrAttribList) {
            this.EnumCredentialsByNameAsync(bstrCredName, bstrAttribList, null);
        }
        
        /// <remarks/>
        public void EnumCredentialsByNameAsync(string bstrCredName, string bstrAttribList, object userState) {
            if ((this.EnumCredentialsByNameOperationCompleted == null)) {
                this.EnumCredentialsByNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnumCredentialsByNameOperationCompleted);
            }
            this.InvokeAsync("EnumCredentialsByName", new object[] {
                        bstrCredName,
                        bstrAttribList}, this.EnumCredentialsByNameOperationCompleted, userState);
        }
        
        private void OnEnumCredentialsByNameOperationCompleted(object arg) {
            if ((this.EnumCredentialsByNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnumCredentialsByNameCompleted(this, new EnumCredentialsByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#EnumCredentialsByNetID", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrCredentialXML")]
        public string EnumCredentialsByNetID(string bstrNetID, string bstrAttribList) {
            object[] results = this.Invoke("EnumCredentialsByNetID", new object[] {
                        bstrNetID,
                        bstrAttribList});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumCredentialsByNetID(string bstrNetID, string bstrAttribList, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumCredentialsByNetID", new object[] {
                        bstrNetID,
                        bstrAttribList}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndEnumCredentialsByNetID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EnumCredentialsByNetIDAsync(string bstrNetID, string bstrAttribList) {
            this.EnumCredentialsByNetIDAsync(bstrNetID, bstrAttribList, null);
        }
        
        /// <remarks/>
        public void EnumCredentialsByNetIDAsync(string bstrNetID, string bstrAttribList, object userState) {
            if ((this.EnumCredentialsByNetIDOperationCompleted == null)) {
                this.EnumCredentialsByNetIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnumCredentialsByNetIDOperationCompleted);
            }
            this.InvokeAsync("EnumCredentialsByNetID", new object[] {
                        bstrNetID,
                        bstrAttribList}, this.EnumCredentialsByNetIDOperationCompleted, userState);
        }
        
        private void OnEnumCredentialsByNetIDOperationCompleted(object arg) {
            if ((this.EnumCredentialsByNetIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnumCredentialsByNetIDCompleted(this, new EnumCredentialsByNetIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#EnumCredentialsByNamespace", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrCredListXML")]
        public string EnumCredentialsByNamespace(string bstrNamespace, string bstrStartingCredName, int NumCredsToReturn) {
            object[] results = this.Invoke("EnumCredentialsByNamespace", new object[] {
                        bstrNamespace,
                        bstrStartingCredName,
                        NumCredsToReturn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumCredentialsByNamespace(string bstrNamespace, string bstrStartingCredName, int NumCredsToReturn, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumCredentialsByNamespace", new object[] {
                        bstrNamespace,
                        bstrStartingCredName,
                        NumCredsToReturn}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndEnumCredentialsByNamespace(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EnumCredentialsByNamespaceAsync(string bstrNamespace, string bstrStartingCredName, int NumCredsToReturn) {
            this.EnumCredentialsByNamespaceAsync(bstrNamespace, bstrStartingCredName, NumCredsToReturn, null);
        }
        
        /// <remarks/>
        public void EnumCredentialsByNamespaceAsync(string bstrNamespace, string bstrStartingCredName, int NumCredsToReturn, object userState) {
            if ((this.EnumCredentialsByNamespaceOperationCompleted == null)) {
                this.EnumCredentialsByNamespaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnumCredentialsByNamespaceOperationCompleted);
            }
            this.InvokeAsync("EnumCredentialsByNamespace", new object[] {
                        bstrNamespace,
                        bstrStartingCredName,
                        NumCredsToReturn}, this.EnumCredentialsByNamespaceOperationCompleted, userState);
        }
        
        private void OnEnumCredentialsByNamespaceOperationCompleted(object arg) {
            if ((this.EnumCredentialsByNamespaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnumCredentialsByNamespaceCompleted(this, new EnumCredentialsByNamespaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#GetCertificateAssociations", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrCertXML")]
        public string GetCertificateAssociations(string bstrNetID, string bstrSigninName) {
            object[] results = this.Invoke("GetCertificateAssociations", new object[] {
                        bstrNetID,
                        bstrSigninName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCertificateAssociations(string bstrNetID, string bstrSigninName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCertificateAssociations", new object[] {
                        bstrNetID,
                        bstrSigninName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetCertificateAssociations(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCertificateAssociationsAsync(string bstrNetID, string bstrSigninName) {
            this.GetCertificateAssociationsAsync(bstrNetID, bstrSigninName, null);
        }
        
        /// <remarks/>
        public void GetCertificateAssociationsAsync(string bstrNetID, string bstrSigninName, object userState) {
            if ((this.GetCertificateAssociationsOperationCompleted == null)) {
                this.GetCertificateAssociationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCertificateAssociationsOperationCompleted);
            }
            this.InvokeAsync("GetCertificateAssociations", new object[] {
                        bstrNetID,
                        bstrSigninName}, this.GetCertificateAssociationsOperationCompleted, userState);
        }
        
        private void OnGetCertificateAssociationsOperationCompleted(object arg) {
            if ((this.GetCertificateAssociationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCertificateAssociationsCompleted(this, new GetCertificateAssociationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#DeleteCertificateAssociation", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteCertificateAssociation(string bstrNetID, string bstrSigninName, string bstrIssuer, string bstrSerialNumber, short sPurpose) {
            this.Invoke("DeleteCertificateAssociation", new object[] {
                        bstrNetID,
                        bstrSigninName,
                        bstrIssuer,
                        bstrSerialNumber,
                        sPurpose});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteCertificateAssociation(string bstrNetID, string bstrSigninName, string bstrIssuer, string bstrSerialNumber, short sPurpose, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteCertificateAssociation", new object[] {
                        bstrNetID,
                        bstrSigninName,
                        bstrIssuer,
                        bstrSerialNumber,
                        sPurpose}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteCertificateAssociation(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteCertificateAssociationAsync(string bstrNetID, string bstrSigninName, string bstrIssuer, string bstrSerialNumber, short sPurpose) {
            this.DeleteCertificateAssociationAsync(bstrNetID, bstrSigninName, bstrIssuer, bstrSerialNumber, sPurpose, null);
        }
        
        /// <remarks/>
        public void DeleteCertificateAssociationAsync(string bstrNetID, string bstrSigninName, string bstrIssuer, string bstrSerialNumber, short sPurpose, object userState) {
            if ((this.DeleteCertificateAssociationOperationCompleted == null)) {
                this.DeleteCertificateAssociationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCertificateAssociationOperationCompleted);
            }
            this.InvokeAsync("DeleteCertificateAssociation", new object[] {
                        bstrNetID,
                        bstrSigninName,
                        bstrIssuer,
                        bstrSerialNumber,
                        sPurpose}, this.DeleteCertificateAssociationOperationCompleted, userState);
        }
        
        private void OnDeleteCertificateAssociationOperationCompleted(object arg) {
            if ((this.DeleteCertificateAssociationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCertificateAssociationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#DeleteAllCertificateAssociations", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAllCertificateAssociations(string bstrNetID, string bstrSigninName) {
            this.Invoke("DeleteAllCertificateAssociations", new object[] {
                        bstrNetID,
                        bstrSigninName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteAllCertificateAssociations(string bstrNetID, string bstrSigninName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteAllCertificateAssociations", new object[] {
                        bstrNetID,
                        bstrSigninName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteAllCertificateAssociations(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteAllCertificateAssociationsAsync(string bstrNetID, string bstrSigninName) {
            this.DeleteAllCertificateAssociationsAsync(bstrNetID, bstrSigninName, null);
        }
        
        /// <remarks/>
        public void DeleteAllCertificateAssociationsAsync(string bstrNetID, string bstrSigninName, object userState) {
            if ((this.DeleteAllCertificateAssociationsOperationCompleted == null)) {
                this.DeleteAllCertificateAssociationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAllCertificateAssociationsOperationCompleted);
            }
            this.InvokeAsync("DeleteAllCertificateAssociations", new object[] {
                        bstrNetID,
                        bstrSigninName}, this.DeleteAllCertificateAssociationsOperationCompleted, userState);
        }
        
        private void OnDeleteAllCertificateAssociationsOperationCompleted(object arg) {
            if ((this.DeleteAllCertificateAssociationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAllCertificateAssociationsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#GetSigninNamesForNetIDs", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrCredXML")]
        public string GetSigninNamesForNetIDs(string bstrNetIDs) {
            object[] results = this.Invoke("GetSigninNamesForNetIDs", new object[] {
                        bstrNetIDs});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSigninNamesForNetIDs(string bstrNetIDs, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSigninNamesForNetIDs", new object[] {
                        bstrNetIDs}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetSigninNamesForNetIDs(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSigninNamesForNetIDsAsync(string bstrNetIDs) {
            this.GetSigninNamesForNetIDsAsync(bstrNetIDs, null);
        }
        
        /// <remarks/>
        public void GetSigninNamesForNetIDsAsync(string bstrNetIDs, object userState) {
            if ((this.GetSigninNamesForNetIDsOperationCompleted == null)) {
                this.GetSigninNamesForNetIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSigninNamesForNetIDsOperationCompleted);
            }
            this.InvokeAsync("GetSigninNamesForNetIDs", new object[] {
                        bstrNetIDs}, this.GetSigninNamesForNetIDsOperationCompleted, userState);
        }
        
        private void OnGetSigninNamesForNetIDsOperationCompleted(object arg) {
            if ((this.GetSigninNamesForNetIDsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSigninNamesForNetIDsCompleted(this, new GetSigninNamesForNetIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#ForceCredentialRename", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ForceCredentialRename(tagPASSID PassID) {
            this.Invoke("ForceCredentialRename", new object[] {
                        PassID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginForceCredentialRename(tagPASSID PassID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ForceCredentialRename", new object[] {
                        PassID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndForceCredentialRename(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ForceCredentialRenameAsync(tagPASSID PassID) {
            this.ForceCredentialRenameAsync(PassID, null);
        }
        
        /// <remarks/>
        public void ForceCredentialRenameAsync(tagPASSID PassID, object userState) {
            if ((this.ForceCredentialRenameOperationCompleted == null)) {
                this.ForceCredentialRenameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnForceCredentialRenameOperationCompleted);
            }
            this.InvokeAsync("ForceCredentialRename", new object[] {
                        PassID}, this.ForceCredentialRenameOperationCompleted, userState);
        }
        
        private void OnForceCredentialRenameOperationCompleted(object arg) {
            if ((this.ForceCredentialRenameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ForceCredentialRenameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#GetNetIDsForSigninNames", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrCredXML")]
        public string GetNetIDsForSigninNames(string bstrSigninNames) {
            object[] results = this.Invoke("GetNetIDsForSigninNames", new object[] {
                        bstrSigninNames});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNetIDsForSigninNames(string bstrSigninNames, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNetIDsForSigninNames", new object[] {
                        bstrSigninNames}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetNetIDsForSigninNames(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNetIDsForSigninNamesAsync(string bstrSigninNames) {
            this.GetNetIDsForSigninNamesAsync(bstrSigninNames, null);
        }
        
        /// <remarks/>
        public void GetNetIDsForSigninNamesAsync(string bstrSigninNames, object userState) {
            if ((this.GetNetIDsForSigninNamesOperationCompleted == null)) {
                this.GetNetIDsForSigninNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNetIDsForSigninNamesOperationCompleted);
            }
            this.InvokeAsync("GetNetIDsForSigninNames", new object[] {
                        bstrSigninNames}, this.GetNetIDsForSigninNamesOperationCompleted, userState);
        }
        
        private void OnGetNetIDsForSigninNamesOperationCompleted(object arg) {
            if ((this.GetNetIDsForSigninNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNetIDsForSigninNamesCompleted(this, new GetNetIDsForSigninNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#QueryCredentialChanges", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ChangesXml")]
        public string QueryCredentialChanges(string OptionsXml) {
            object[] results = this.Invoke("QueryCredentialChanges", new object[] {
                        OptionsXml});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginQueryCredentialChanges(string OptionsXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("QueryCredentialChanges", new object[] {
                        OptionsXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndQueryCredentialChanges(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryCredentialChangesAsync(string OptionsXml) {
            this.QueryCredentialChangesAsync(OptionsXml, null);
        }
        
        /// <remarks/>
        public void QueryCredentialChangesAsync(string OptionsXml, object userState) {
            if ((this.QueryCredentialChangesOperationCompleted == null)) {
                this.QueryCredentialChangesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryCredentialChangesOperationCompleted);
            }
            this.InvokeAsync("QueryCredentialChanges", new object[] {
                        OptionsXml}, this.QueryCredentialChangesOperationCompleted, userState);
        }
        
        private void OnQueryCredentialChangesOperationCompleted(object arg) {
            if ((this.QueryCredentialChangesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryCredentialChangesCompleted(this, new QueryCredentialChangesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#QueryCredentialHistory", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ChangeHistory")]
        public string QueryCredentialHistory(string StartAfterDateTime, string EndAtDateTime, string CredType, string ChangeType, string OptionalDomainAuthority, int NumRecordsMax, string StartAfterChangeID) {
            object[] results = this.Invoke("QueryCredentialHistory", new object[] {
                        StartAfterDateTime,
                        EndAtDateTime,
                        CredType,
                        ChangeType,
                        OptionalDomainAuthority,
                        NumRecordsMax,
                        StartAfterChangeID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginQueryCredentialHistory(string StartAfterDateTime, string EndAtDateTime, string CredType, string ChangeType, string OptionalDomainAuthority, int NumRecordsMax, string StartAfterChangeID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("QueryCredentialHistory", new object[] {
                        StartAfterDateTime,
                        EndAtDateTime,
                        CredType,
                        ChangeType,
                        OptionalDomainAuthority,
                        NumRecordsMax,
                        StartAfterChangeID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndQueryCredentialHistory(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryCredentialHistoryAsync(string StartAfterDateTime, string EndAtDateTime, string CredType, string ChangeType, string OptionalDomainAuthority, int NumRecordsMax, string StartAfterChangeID) {
            this.QueryCredentialHistoryAsync(StartAfterDateTime, EndAtDateTime, CredType, ChangeType, OptionalDomainAuthority, NumRecordsMax, StartAfterChangeID, null);
        }
        
        /// <remarks/>
        public void QueryCredentialHistoryAsync(string StartAfterDateTime, string EndAtDateTime, string CredType, string ChangeType, string OptionalDomainAuthority, int NumRecordsMax, string StartAfterChangeID, object userState) {
            if ((this.QueryCredentialHistoryOperationCompleted == null)) {
                this.QueryCredentialHistoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryCredentialHistoryOperationCompleted);
            }
            this.InvokeAsync("QueryCredentialHistory", new object[] {
                        StartAfterDateTime,
                        EndAtDateTime,
                        CredType,
                        ChangeType,
                        OptionalDomainAuthority,
                        NumRecordsMax,
                        StartAfterChangeID}, this.QueryCredentialHistoryOperationCompleted, userState);
        }
        
        private void OnQueryCredentialHistoryOperationCompleted(object arg) {
            if ((this.QueryCredentialHistoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryCredentialHistoryCompleted(this, new QueryCredentialHistoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#QueryCredentialHistoryByNetID", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("ChangeHistory")]
        public string QueryCredentialHistoryByNetID(string StartAfterDateTime, string EndAtDateTime, string NetID, string CredType, string ChangeType, int NumRecordsMax, string StartAfterChangeID) {
            object[] results = this.Invoke("QueryCredentialHistoryByNetID", new object[] {
                        StartAfterDateTime,
                        EndAtDateTime,
                        NetID,
                        CredType,
                        ChangeType,
                        NumRecordsMax,
                        StartAfterChangeID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginQueryCredentialHistoryByNetID(string StartAfterDateTime, string EndAtDateTime, string NetID, string CredType, string ChangeType, int NumRecordsMax, string StartAfterChangeID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("QueryCredentialHistoryByNetID", new object[] {
                        StartAfterDateTime,
                        EndAtDateTime,
                        NetID,
                        CredType,
                        ChangeType,
                        NumRecordsMax,
                        StartAfterChangeID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndQueryCredentialHistoryByNetID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryCredentialHistoryByNetIDAsync(string StartAfterDateTime, string EndAtDateTime, string NetID, string CredType, string ChangeType, int NumRecordsMax, string StartAfterChangeID) {
            this.QueryCredentialHistoryByNetIDAsync(StartAfterDateTime, EndAtDateTime, NetID, CredType, ChangeType, NumRecordsMax, StartAfterChangeID, null);
        }
        
        /// <remarks/>
        public void QueryCredentialHistoryByNetIDAsync(string StartAfterDateTime, string EndAtDateTime, string NetID, string CredType, string ChangeType, int NumRecordsMax, string StartAfterChangeID, object userState) {
            if ((this.QueryCredentialHistoryByNetIDOperationCompleted == null)) {
                this.QueryCredentialHistoryByNetIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryCredentialHistoryByNetIDOperationCompleted);
            }
            this.InvokeAsync("QueryCredentialHistoryByNetID", new object[] {
                        StartAfterDateTime,
                        EndAtDateTime,
                        NetID,
                        CredType,
                        ChangeType,
                        NumRecordsMax,
                        StartAfterChangeID}, this.QueryCredentialHistoryByNetIDOperationCompleted, userState);
        }
        
        private void OnQueryCredentialHistoryByNetIDOperationCompleted(object arg) {
            if ((this.QueryCredentialHistoryByNetIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryCredentialHistoryByNetIDCompleted(this, new QueryCredentialHistoryByNetIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#QueryNetIDHistoryBySigninName", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("NetIDHistory")]
        public string QueryNetIDHistoryBySigninName(string StartAfterDateTime, string EndAtDateTime, string SigninName, int NumRecordsMax) {
            object[] results = this.Invoke("QueryNetIDHistoryBySigninName", new object[] {
                        StartAfterDateTime,
                        EndAtDateTime,
                        SigninName,
                        NumRecordsMax});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginQueryNetIDHistoryBySigninName(string StartAfterDateTime, string EndAtDateTime, string SigninName, int NumRecordsMax, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("QueryNetIDHistoryBySigninName", new object[] {
                        StartAfterDateTime,
                        EndAtDateTime,
                        SigninName,
                        NumRecordsMax}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndQueryNetIDHistoryBySigninName(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryNetIDHistoryBySigninNameAsync(string StartAfterDateTime, string EndAtDateTime, string SigninName, int NumRecordsMax) {
            this.QueryNetIDHistoryBySigninNameAsync(StartAfterDateTime, EndAtDateTime, SigninName, NumRecordsMax, null);
        }
        
        /// <remarks/>
        public void QueryNetIDHistoryBySigninNameAsync(string StartAfterDateTime, string EndAtDateTime, string SigninName, int NumRecordsMax, object userState) {
            if ((this.QueryNetIDHistoryBySigninNameOperationCompleted == null)) {
                this.QueryNetIDHistoryBySigninNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryNetIDHistoryBySigninNameOperationCompleted);
            }
            this.InvokeAsync("QueryNetIDHistoryBySigninName", new object[] {
                        StartAfterDateTime,
                        EndAtDateTime,
                        SigninName,
                        NumRecordsMax}, this.QueryNetIDHistoryBySigninNameOperationCompleted, userState);
        }
        
        private void OnQueryNetIDHistoryBySigninNameOperationCompleted(object arg) {
            if ((this.QueryNetIDHistoryBySigninNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryNetIDHistoryBySigninNameCompleted(this, new QueryNetIDHistoryBySigninNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#SuggestAlternateMemberNames", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("Names")]
        public string SuggestAlternateMemberNames(string Namespace, string FirstName, string LastName, string RequestedName) {
            object[] results = this.Invoke("SuggestAlternateMemberNames", new object[] {
                        Namespace,
                        FirstName,
                        LastName,
                        RequestedName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSuggestAlternateMemberNames(string Namespace, string FirstName, string LastName, string RequestedName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SuggestAlternateMemberNames", new object[] {
                        Namespace,
                        FirstName,
                        LastName,
                        RequestedName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndSuggestAlternateMemberNames(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SuggestAlternateMemberNamesAsync(string Namespace, string FirstName, string LastName, string RequestedName) {
            this.SuggestAlternateMemberNamesAsync(Namespace, FirstName, LastName, RequestedName, null);
        }
        
        /// <remarks/>
        public void SuggestAlternateMemberNamesAsync(string Namespace, string FirstName, string LastName, string RequestedName, object userState) {
            if ((this.SuggestAlternateMemberNamesOperationCompleted == null)) {
                this.SuggestAlternateMemberNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuggestAlternateMemberNamesOperationCompleted);
            }
            this.InvokeAsync("SuggestAlternateMemberNames", new object[] {
                        Namespace,
                        FirstName,
                        LastName,
                        RequestedName}, this.SuggestAlternateMemberNamesOperationCompleted, userState);
        }
        
        private void OnSuggestAlternateMemberNamesOperationCompleted(object arg) {
            if ((this.SuggestAlternateMemberNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuggestAlternateMemberNamesCompleted(this, new SuggestAlternateMemberNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#GetSigninNamesAndCIDsForNetIDs", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrCredXML")]
        public string GetSigninNamesAndCIDsForNetIDs(string bstrNetIDs) {
            object[] results = this.Invoke("GetSigninNamesAndCIDsForNetIDs", new object[] {
                        bstrNetIDs});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSigninNamesAndCIDsForNetIDs(string bstrNetIDs, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSigninNamesAndCIDsForNetIDs", new object[] {
                        bstrNetIDs}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetSigninNamesAndCIDsForNetIDs(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSigninNamesAndCIDsForNetIDsAsync(string bstrNetIDs) {
            this.GetSigninNamesAndCIDsForNetIDsAsync(bstrNetIDs, null);
        }
        
        /// <remarks/>
        public void GetSigninNamesAndCIDsForNetIDsAsync(string bstrNetIDs, object userState) {
            if ((this.GetSigninNamesAndCIDsForNetIDsOperationCompleted == null)) {
                this.GetSigninNamesAndCIDsForNetIDsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSigninNamesAndCIDsForNetIDsOperationCompleted);
            }
            this.InvokeAsync("GetSigninNamesAndCIDsForNetIDs", new object[] {
                        bstrNetIDs}, this.GetSigninNamesAndCIDsForNetIDsOperationCompleted, userState);
        }
        
        private void OnGetSigninNamesAndCIDsForNetIDsOperationCompleted(object arg) {
            if ((this.GetSigninNamesAndCIDsForNetIDsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSigninNamesAndCIDsForNetIDsCompleted(this, new GetSigninNamesAndCIDsForNetIDsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#GetNetIDsAndCIDsForSigninNames", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrCredXML")]
        public string GetNetIDsAndCIDsForSigninNames(string bstrSigninNames) {
            object[] results = this.Invoke("GetNetIDsAndCIDsForSigninNames", new object[] {
                        bstrSigninNames});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNetIDsAndCIDsForSigninNames(string bstrSigninNames, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNetIDsAndCIDsForSigninNames", new object[] {
                        bstrSigninNames}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetNetIDsAndCIDsForSigninNames(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetNetIDsAndCIDsForSigninNamesAsync(string bstrSigninNames) {
            this.GetNetIDsAndCIDsForSigninNamesAsync(bstrSigninNames, null);
        }
        
        /// <remarks/>
        public void GetNetIDsAndCIDsForSigninNamesAsync(string bstrSigninNames, object userState) {
            if ((this.GetNetIDsAndCIDsForSigninNamesOperationCompleted == null)) {
                this.GetNetIDsAndCIDsForSigninNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNetIDsAndCIDsForSigninNamesOperationCompleted);
            }
            this.InvokeAsync("GetNetIDsAndCIDsForSigninNames", new object[] {
                        bstrSigninNames}, this.GetNetIDsAndCIDsForSigninNamesOperationCompleted, userState);
        }
        
        private void OnGetNetIDsAndCIDsForSigninNamesOperationCompleted(object arg) {
            if ((this.GetNetIDsAndCIDsForSigninNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNetIDsAndCIDsForSigninNamesCompleted(this, new GetNetIDsAndCIDsForSigninNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#CheckAvailableSigninNames", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrCredXML")]
        public string CheckAvailableSigninNames(string bstrSigninNames) {
            object[] results = this.Invoke("CheckAvailableSigninNames", new object[] {
                        bstrSigninNames});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckAvailableSigninNames(string bstrSigninNames, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckAvailableSigninNames", new object[] {
                        bstrSigninNames}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCheckAvailableSigninNames(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckAvailableSigninNamesAsync(string bstrSigninNames) {
            this.CheckAvailableSigninNamesAsync(bstrSigninNames, null);
        }
        
        /// <remarks/>
        public void CheckAvailableSigninNamesAsync(string bstrSigninNames, object userState) {
            if ((this.CheckAvailableSigninNamesOperationCompleted == null)) {
                this.CheckAvailableSigninNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckAvailableSigninNamesOperationCompleted);
            }
            this.InvokeAsync("CheckAvailableSigninNames", new object[] {
                        bstrSigninNames}, this.CheckAvailableSigninNamesOperationCompleted, userState);
        }
        
        private void OnCheckAvailableSigninNamesOperationCompleted(object arg) {
            if ((this.CheckAvailableSigninNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckAvailableSigninNamesCompleted(this, new CheckAvailableSigninNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#CheckRenameRules", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrAvailableAttributes")]
        public string CheckRenameRules(tagPASSID PassIDIn) {
            object[] results = this.Invoke("CheckRenameRules", new object[] {
                        PassIDIn});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckRenameRules(tagPASSID PassIDIn, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckRenameRules", new object[] {
                        PassIDIn}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCheckRenameRules(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckRenameRulesAsync(tagPASSID PassIDIn) {
            this.CheckRenameRulesAsync(PassIDIn, null);
        }
        
        /// <remarks/>
        public void CheckRenameRulesAsync(tagPASSID PassIDIn, object userState) {
            if ((this.CheckRenameRulesOperationCompleted == null)) {
                this.CheckRenameRulesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRenameRulesOperationCompleted);
            }
            this.InvokeAsync("CheckRenameRules", new object[] {
                        PassIDIn}, this.CheckRenameRulesOperationCompleted, userState);
        }
        
        private void OnCheckRenameRulesOperationCompleted(object arg) {
            if ((this.CheckRenameRulesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRenameRulesCompleted(this, new CheckRenameRulesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#RenameCredentialEx", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrSLTResponseBlob")]
        public string RenameCredentialEx(tagPASSID PassIDIn, string bstrNewSigninName, string bstrOptionalParams) {
            object[] results = this.Invoke("RenameCredentialEx", new object[] {
                        PassIDIn,
                        bstrNewSigninName,
                        bstrOptionalParams});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRenameCredentialEx(tagPASSID PassIDIn, string bstrNewSigninName, string bstrOptionalParams, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RenameCredentialEx", new object[] {
                        PassIDIn,
                        bstrNewSigninName,
                        bstrOptionalParams}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRenameCredentialEx(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RenameCredentialExAsync(tagPASSID PassIDIn, string bstrNewSigninName, string bstrOptionalParams) {
            this.RenameCredentialExAsync(PassIDIn, bstrNewSigninName, bstrOptionalParams, null);
        }
        
        /// <remarks/>
        public void RenameCredentialExAsync(tagPASSID PassIDIn, string bstrNewSigninName, string bstrOptionalParams, object userState) {
            if ((this.RenameCredentialExOperationCompleted == null)) {
                this.RenameCredentialExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameCredentialExOperationCompleted);
            }
            this.InvokeAsync("RenameCredentialEx", new object[] {
                        PassIDIn,
                        bstrNewSigninName,
                        bstrOptionalParams}, this.RenameCredentialExOperationCompleted, userState);
        }
        
        private void OnRenameCredentialExOperationCompleted(object arg) {
            if ((this.RenameCredentialExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenameCredentialExCompleted(this, new RenameCredentialExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#ReserveName", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ReserveName(tagPASSID PassIDIn, string bstrNewSigninName) {
            this.Invoke("ReserveName", new object[] {
                        PassIDIn,
                        bstrNewSigninName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReserveName(tagPASSID PassIDIn, string bstrNewSigninName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReserveName", new object[] {
                        PassIDIn,
                        bstrNewSigninName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndReserveName(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ReserveNameAsync(tagPASSID PassIDIn, string bstrNewSigninName) {
            this.ReserveNameAsync(PassIDIn, bstrNewSigninName, null);
        }
        
        /// <remarks/>
        public void ReserveNameAsync(tagPASSID PassIDIn, string bstrNewSigninName, object userState) {
            if ((this.ReserveNameOperationCompleted == null)) {
                this.ReserveNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReserveNameOperationCompleted);
            }
            this.InvokeAsync("ReserveName", new object[] {
                        PassIDIn,
                        bstrNewSigninName}, this.ReserveNameOperationCompleted, userState);
        }
        
        private void OnReserveNameOperationCompleted(object arg) {
            if ((this.ReserveNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReserveNameCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#AddLinkAccounts", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddLinkAccounts(string bstrLinkProofData, ref string pbstrLinkID) {
            object[] results = this.Invoke("AddLinkAccounts", new object[] {
                        bstrLinkProofData,
                        pbstrLinkID});
            pbstrLinkID = ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddLinkAccounts(string bstrLinkProofData, string pbstrLinkID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddLinkAccounts", new object[] {
                        bstrLinkProofData,
                        pbstrLinkID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddLinkAccounts(System.IAsyncResult asyncResult, out string pbstrLinkID) {
            object[] results = this.EndInvoke(asyncResult);
            pbstrLinkID = ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddLinkAccountsAsync(string bstrLinkProofData, string pbstrLinkID) {
            this.AddLinkAccountsAsync(bstrLinkProofData, pbstrLinkID, null);
        }
        
        /// <remarks/>
        public void AddLinkAccountsAsync(string bstrLinkProofData, string pbstrLinkID, object userState) {
            if ((this.AddLinkAccountsOperationCompleted == null)) {
                this.AddLinkAccountsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddLinkAccountsOperationCompleted);
            }
            this.InvokeAsync("AddLinkAccounts", new object[] {
                        bstrLinkProofData,
                        pbstrLinkID}, this.AddLinkAccountsOperationCompleted, userState);
        }
        
        private void OnAddLinkAccountsOperationCompleted(object arg) {
            if ((this.AddLinkAccountsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddLinkAccountsCompleted(this, new AddLinkAccountsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#DeLinkAccounts", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeLinkAccounts(string bstrSigninNames, string SLT) {
            this.Invoke("DeLinkAccounts", new object[] {
                        bstrSigninNames,
                        SLT});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeLinkAccounts(string bstrSigninNames, string SLT, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeLinkAccounts", new object[] {
                        bstrSigninNames,
                        SLT}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeLinkAccounts(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeLinkAccountsAsync(string bstrSigninNames, string SLT) {
            this.DeLinkAccountsAsync(bstrSigninNames, SLT, null);
        }
        
        /// <remarks/>
        public void DeLinkAccountsAsync(string bstrSigninNames, string SLT, object userState) {
            if ((this.DeLinkAccountsOperationCompleted == null)) {
                this.DeLinkAccountsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeLinkAccountsOperationCompleted);
            }
            this.InvokeAsync("DeLinkAccounts", new object[] {
                        bstrSigninNames,
                        SLT}, this.DeLinkAccountsOperationCompleted, userState);
        }
        
        private void OnDeLinkAccountsOperationCompleted(object arg) {
            if ((this.DeLinkAccountsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeLinkAccountsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#GetLinkAccountMembers", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrLinkCredXML")]
        public string GetLinkAccountMembers(string bstrLinkID) {
            object[] results = this.Invoke("GetLinkAccountMembers", new object[] {
                        bstrLinkID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLinkAccountMembers(string bstrLinkID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLinkAccountMembers", new object[] {
                        bstrLinkID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetLinkAccountMembers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLinkAccountMembersAsync(string bstrLinkID) {
            this.GetLinkAccountMembersAsync(bstrLinkID, null);
        }
        
        /// <remarks/>
        public void GetLinkAccountMembersAsync(string bstrLinkID, object userState) {
            if ((this.GetLinkAccountMembersOperationCompleted == null)) {
                this.GetLinkAccountMembersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLinkAccountMembersOperationCompleted);
            }
            this.InvokeAsync("GetLinkAccountMembers", new object[] {
                        bstrLinkID}, this.GetLinkAccountMembersOperationCompleted, userState);
        }
        
        private void OnGetLinkAccountMembersOperationCompleted(object arg) {
            if ((this.GetLinkAccountMembersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLinkAccountMembersCompleted(this, new GetLinkAccountMembersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#AssociateCertificate", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AssociateCertificate(string bstrCertType, string bstrNetID, string bstrCertificateToken) {
            this.Invoke("AssociateCertificate", new object[] {
                        bstrCertType,
                        bstrNetID,
                        bstrCertificateToken});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAssociateCertificate(string bstrCertType, string bstrNetID, string bstrCertificateToken, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AssociateCertificate", new object[] {
                        bstrCertType,
                        bstrNetID,
                        bstrCertificateToken}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAssociateCertificate(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AssociateCertificateAsync(string bstrCertType, string bstrNetID, string bstrCertificateToken) {
            this.AssociateCertificateAsync(bstrCertType, bstrNetID, bstrCertificateToken, null);
        }
        
        /// <remarks/>
        public void AssociateCertificateAsync(string bstrCertType, string bstrNetID, string bstrCertificateToken, object userState) {
            if ((this.AssociateCertificateOperationCompleted == null)) {
                this.AssociateCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssociateCertificateOperationCompleted);
            }
            this.InvokeAsync("AssociateCertificate", new object[] {
                        bstrCertType,
                        bstrNetID,
                        bstrCertificateToken}, this.AssociateCertificateOperationCompleted, userState);
        }
        
        private void OnAssociateCertificateOperationCompleted(object arg) {
            if ((this.AssociateCertificateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AssociateCertificateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#DisassociateCertificate", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DisassociateCertificate(string bstrCertType, string bstrNetID, string bstrCertificateList) {
            this.Invoke("DisassociateCertificate", new object[] {
                        bstrCertType,
                        bstrNetID,
                        bstrCertificateList});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDisassociateCertificate(string bstrCertType, string bstrNetID, string bstrCertificateList, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DisassociateCertificate", new object[] {
                        bstrCertType,
                        bstrNetID,
                        bstrCertificateList}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDisassociateCertificate(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DisassociateCertificateAsync(string bstrCertType, string bstrNetID, string bstrCertificateList) {
            this.DisassociateCertificateAsync(bstrCertType, bstrNetID, bstrCertificateList, null);
        }
        
        /// <remarks/>
        public void DisassociateCertificateAsync(string bstrCertType, string bstrNetID, string bstrCertificateList, object userState) {
            if ((this.DisassociateCertificateOperationCompleted == null)) {
                this.DisassociateCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisassociateCertificateOperationCompleted);
            }
            this.InvokeAsync("DisassociateCertificate", new object[] {
                        bstrCertType,
                        bstrNetID,
                        bstrCertificateList}, this.DisassociateCertificateOperationCompleted, userState);
        }
        
        private void OnDisassociateCertificateOperationCompleted(object arg) {
            if ((this.DisassociateCertificateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisassociateCertificateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#DeleteCredentialEx", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteCredentialEx(tagPASSID PassIDIn, string bstrOptionalParams) {
            this.Invoke("DeleteCredentialEx", new object[] {
                        PassIDIn,
                        bstrOptionalParams});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteCredentialEx(tagPASSID PassIDIn, string bstrOptionalParams, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteCredentialEx", new object[] {
                        PassIDIn,
                        bstrOptionalParams}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteCredentialEx(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteCredentialExAsync(tagPASSID PassIDIn, string bstrOptionalParams) {
            this.DeleteCredentialExAsync(PassIDIn, bstrOptionalParams, null);
        }
        
        /// <remarks/>
        public void DeleteCredentialExAsync(tagPASSID PassIDIn, string bstrOptionalParams, object userState) {
            if ((this.DeleteCredentialExOperationCompleted == null)) {
                this.DeleteCredentialExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCredentialExOperationCompleted);
            }
            this.InvokeAsync("DeleteCredentialEx", new object[] {
                        PassIDIn,
                        bstrOptionalParams}, this.DeleteCredentialExOperationCompleted, userState);
        }
        
        private void OnDeleteCredentialExOperationCompleted(object arg) {
            if ((this.DeleteCredentialExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCredentialExCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#CreateAlias", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrAUID")]
        public string CreateAlias(tagPASSID PassIDIn, string bstrAliasXML, bool fSuggestName, out string pbstrSuggestedNames) {
            object[] results = this.Invoke("CreateAlias", new object[] {
                        PassIDIn,
                        bstrAliasXML,
                        fSuggestName});
            pbstrSuggestedNames = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateAlias(tagPASSID PassIDIn, string bstrAliasXML, bool fSuggestName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateAlias", new object[] {
                        PassIDIn,
                        bstrAliasXML,
                        fSuggestName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCreateAlias(System.IAsyncResult asyncResult, out string pbstrSuggestedNames) {
            object[] results = this.EndInvoke(asyncResult);
            pbstrSuggestedNames = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateAliasAsync(tagPASSID PassIDIn, string bstrAliasXML, bool fSuggestName) {
            this.CreateAliasAsync(PassIDIn, bstrAliasXML, fSuggestName, null);
        }
        
        /// <remarks/>
        public void CreateAliasAsync(tagPASSID PassIDIn, string bstrAliasXML, bool fSuggestName, object userState) {
            if ((this.CreateAliasOperationCompleted == null)) {
                this.CreateAliasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateAliasOperationCompleted);
            }
            this.InvokeAsync("CreateAlias", new object[] {
                        PassIDIn,
                        bstrAliasXML,
                        fSuggestName}, this.CreateAliasOperationCompleted, userState);
        }
        
        private void OnCreateAliasOperationCompleted(object arg) {
            if ((this.CreateAliasCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateAliasCompleted(this, new CreateAliasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#UpdateAlias", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateAlias(tagPASSID PassIDIn, string bstrAliasXML) {
            this.Invoke("UpdateAlias", new object[] {
                        PassIDIn,
                        bstrAliasXML});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateAlias(tagPASSID PassIDIn, string bstrAliasXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateAlias", new object[] {
                        PassIDIn,
                        bstrAliasXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateAlias(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateAliasAsync(tagPASSID PassIDIn, string bstrAliasXML) {
            this.UpdateAliasAsync(PassIDIn, bstrAliasXML, null);
        }
        
        /// <remarks/>
        public void UpdateAliasAsync(tagPASSID PassIDIn, string bstrAliasXML, object userState) {
            if ((this.UpdateAliasOperationCompleted == null)) {
                this.UpdateAliasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAliasOperationCompleted);
            }
            this.InvokeAsync("UpdateAlias", new object[] {
                        PassIDIn,
                        bstrAliasXML}, this.UpdateAliasOperationCompleted, userState);
        }
        
        private void OnUpdateAliasOperationCompleted(object arg) {
            if ((this.UpdateAliasCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAliasCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#DeleteAlias", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteAlias(tagPASSID PassIDIn, string bstrAliasXML) {
            this.Invoke("DeleteAlias", new object[] {
                        PassIDIn,
                        bstrAliasXML});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteAlias(tagPASSID PassIDIn, string bstrAliasXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteAlias", new object[] {
                        PassIDIn,
                        bstrAliasXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteAlias(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteAliasAsync(tagPASSID PassIDIn, string bstrAliasXML) {
            this.DeleteAliasAsync(PassIDIn, bstrAliasXML, null);
        }
        
        /// <remarks/>
        public void DeleteAliasAsync(tagPASSID PassIDIn, string bstrAliasXML, object userState) {
            if ((this.DeleteAliasOperationCompleted == null)) {
                this.DeleteAliasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteAliasOperationCompleted);
            }
            this.InvokeAsync("DeleteAlias", new object[] {
                        PassIDIn,
                        bstrAliasXML}, this.DeleteAliasOperationCompleted, userState);
        }
        
        private void OnDeleteAliasOperationCompleted(object arg) {
            if ((this.DeleteAliasCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteAliasCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#RenameAlias", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrAliasXML")]
        public string RenameAlias(tagPASSID PassIDIn, string bstrOldName, string bstrNewName) {
            object[] results = this.Invoke("RenameAlias", new object[] {
                        PassIDIn,
                        bstrOldName,
                        bstrNewName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRenameAlias(tagPASSID PassIDIn, string bstrOldName, string bstrNewName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RenameAlias", new object[] {
                        PassIDIn,
                        bstrOldName,
                        bstrNewName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRenameAlias(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RenameAliasAsync(tagPASSID PassIDIn, string bstrOldName, string bstrNewName) {
            this.RenameAliasAsync(PassIDIn, bstrOldName, bstrNewName, null);
        }
        
        /// <remarks/>
        public void RenameAliasAsync(tagPASSID PassIDIn, string bstrOldName, string bstrNewName, object userState) {
            if ((this.RenameAliasOperationCompleted == null)) {
                this.RenameAliasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameAliasOperationCompleted);
            }
            this.InvokeAsync("RenameAlias", new object[] {
                        PassIDIn,
                        bstrOldName,
                        bstrNewName}, this.RenameAliasOperationCompleted, userState);
        }
        
        private void OnRenameAliasOperationCompleted(object arg) {
            if ((this.RenameAliasCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenameAliasCompleted(this, new RenameAliasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#GetAliasesForAccount", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrAliasXML")]
        public string GetAliasesForAccount(tagPASSID PassIDIn, string bstrOptionalParams) {
            object[] results = this.Invoke("GetAliasesForAccount", new object[] {
                        PassIDIn,
                        bstrOptionalParams});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAliasesForAccount(tagPASSID PassIDIn, string bstrOptionalParams, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAliasesForAccount", new object[] {
                        PassIDIn,
                        bstrOptionalParams}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetAliasesForAccount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAliasesForAccountAsync(tagPASSID PassIDIn, string bstrOptionalParams) {
            this.GetAliasesForAccountAsync(PassIDIn, bstrOptionalParams, null);
        }
        
        /// <remarks/>
        public void GetAliasesForAccountAsync(tagPASSID PassIDIn, string bstrOptionalParams, object userState) {
            if ((this.GetAliasesForAccountOperationCompleted == null)) {
                this.GetAliasesForAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAliasesForAccountOperationCompleted);
            }
            this.InvokeAsync("GetAliasesForAccount", new object[] {
                        PassIDIn,
                        bstrOptionalParams}, this.GetAliasesForAccountOperationCompleted, userState);
        }
        
        private void OnGetAliasesForAccountOperationCompleted(object arg) {
            if ((this.GetAliasesForAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAliasesForAccountCompleted(this, new GetAliasesForAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#GetAccountForAlias", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrAliasXML")]
        public string GetAccountForAlias(tagPASSID AliasIDIn, string bstrOptionalParams) {
            object[] results = this.Invoke("GetAccountForAlias", new object[] {
                        AliasIDIn,
                        bstrOptionalParams});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAccountForAlias(tagPASSID AliasIDIn, string bstrOptionalParams, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAccountForAlias", new object[] {
                        AliasIDIn,
                        bstrOptionalParams}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetAccountForAlias(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAccountForAliasAsync(tagPASSID AliasIDIn, string bstrOptionalParams) {
            this.GetAccountForAliasAsync(AliasIDIn, bstrOptionalParams, null);
        }
        
        /// <remarks/>
        public void GetAccountForAliasAsync(tagPASSID AliasIDIn, string bstrOptionalParams, object userState) {
            if ((this.GetAccountForAliasOperationCompleted == null)) {
                this.GetAccountForAliasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountForAliasOperationCompleted);
            }
            this.InvokeAsync("GetAccountForAlias", new object[] {
                        AliasIDIn,
                        bstrOptionalParams}, this.GetAccountForAliasOperationCompleted, userState);
        }
        
        private void OnGetAccountForAliasOperationCompleted(object arg) {
            if ((this.GetAccountForAliasCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountForAliasCompleted(this, new GetAccountForAliasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#AddToReputationScore", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrDataFeedXML")]
        public string AddToReputationScore(string bstrDataFeedXML) {
            object[] results = this.Invoke("AddToReputationScore", new object[] {
                        bstrDataFeedXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddToReputationScore(string bstrDataFeedXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddToReputationScore", new object[] {
                        bstrDataFeedXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAddToReputationScore(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddToReputationScoreAsync(string bstrDataFeedXML) {
            this.AddToReputationScoreAsync(bstrDataFeedXML, null);
        }
        
        /// <remarks/>
        public void AddToReputationScoreAsync(string bstrDataFeedXML, object userState) {
            if ((this.AddToReputationScoreOperationCompleted == null)) {
                this.AddToReputationScoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddToReputationScoreOperationCompleted);
            }
            this.InvokeAsync("AddToReputationScore", new object[] {
                        bstrDataFeedXML}, this.AddToReputationScoreOperationCompleted, userState);
        }
        
        private void OnAddToReputationScoreOperationCompleted(object arg) {
            if ((this.AddToReputationScoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddToReputationScoreCompleted(this, new AddToReputationScoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#OverrideReputationScore", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrDataFeedXML")]
        public string OverrideReputationScore(string bstrDataFeedXML) {
            object[] results = this.Invoke("OverrideReputationScore", new object[] {
                        bstrDataFeedXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginOverrideReputationScore(string bstrDataFeedXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("OverrideReputationScore", new object[] {
                        bstrDataFeedXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndOverrideReputationScore(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void OverrideReputationScoreAsync(string bstrDataFeedXML) {
            this.OverrideReputationScoreAsync(bstrDataFeedXML, null);
        }
        
        /// <remarks/>
        public void OverrideReputationScoreAsync(string bstrDataFeedXML, object userState) {
            if ((this.OverrideReputationScoreOperationCompleted == null)) {
                this.OverrideReputationScoreOperationCompleted = new System.Threading.SendOrPostCallback(this.OnOverrideReputationScoreOperationCompleted);
            }
            this.InvokeAsync("OverrideReputationScore", new object[] {
                        bstrDataFeedXML}, this.OverrideReputationScoreOperationCompleted, userState);
        }
        
        private void OnOverrideReputationScoreOperationCompleted(object arg) {
            if ((this.OverrideReputationScoreCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.OverrideReputationScoreCompleted(this, new OverrideReputationScoreCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#GetReputationScoreDetails", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrReputationScoreXML")]
        public string GetReputationScoreDetails(tagPASSID PassIDIn, string bstrOptionalParams) {
            object[] results = this.Invoke("GetReputationScoreDetails", new object[] {
                        PassIDIn,
                        bstrOptionalParams});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetReputationScoreDetails(tagPASSID PassIDIn, string bstrOptionalParams, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetReputationScoreDetails", new object[] {
                        PassIDIn,
                        bstrOptionalParams}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetReputationScoreDetails(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetReputationScoreDetailsAsync(tagPASSID PassIDIn, string bstrOptionalParams) {
            this.GetReputationScoreDetailsAsync(PassIDIn, bstrOptionalParams, null);
        }
        
        /// <remarks/>
        public void GetReputationScoreDetailsAsync(tagPASSID PassIDIn, string bstrOptionalParams, object userState) {
            if ((this.GetReputationScoreDetailsOperationCompleted == null)) {
                this.GetReputationScoreDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReputationScoreDetailsOperationCompleted);
            }
            this.InvokeAsync("GetReputationScoreDetails", new object[] {
                        PassIDIn,
                        bstrOptionalParams}, this.GetReputationScoreDetailsOperationCompleted, userState);
        }
        
        private void OnGetReputationScoreDetailsOperationCompleted(object arg) {
            if ((this.GetReputationScoreDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReputationScoreDetailsCompleted(this, new GetReputationScoreDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#EnumerateDevice", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrDeviceIdsXML")]
        public string EnumerateDevice(tagPASSID idUserPUID) {
            object[] results = this.Invoke("EnumerateDevice", new object[] {
                        idUserPUID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumerateDevice(tagPASSID idUserPUID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumerateDevice", new object[] {
                        idUserPUID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndEnumerateDevice(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EnumerateDeviceAsync(tagPASSID idUserPUID) {
            this.EnumerateDeviceAsync(idUserPUID, null);
        }
        
        /// <remarks/>
        public void EnumerateDeviceAsync(tagPASSID idUserPUID, object userState) {
            if ((this.EnumerateDeviceOperationCompleted == null)) {
                this.EnumerateDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnumerateDeviceOperationCompleted);
            }
            this.InvokeAsync("EnumerateDevice", new object[] {
                        idUserPUID}, this.EnumerateDeviceOperationCompleted, userState);
        }
        
        private void OnEnumerateDeviceOperationCompleted(object arg) {
            if ((this.EnumerateDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnumerateDeviceCompleted(this, new EnumerateDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#EnumerateAssociationsForDevice", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrUserIdsXML")]
        public string EnumerateAssociationsForDevice(tagPASSID idDevicePUID, string bstrAssociationsTypes) {
            object[] results = this.Invoke("EnumerateAssociationsForDevice", new object[] {
                        idDevicePUID,
                        bstrAssociationsTypes});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumerateAssociationsForDevice(tagPASSID idDevicePUID, string bstrAssociationsTypes, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumerateAssociationsForDevice", new object[] {
                        idDevicePUID,
                        bstrAssociationsTypes}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndEnumerateAssociationsForDevice(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EnumerateAssociationsForDeviceAsync(tagPASSID idDevicePUID, string bstrAssociationsTypes) {
            this.EnumerateAssociationsForDeviceAsync(idDevicePUID, bstrAssociationsTypes, null);
        }
        
        /// <remarks/>
        public void EnumerateAssociationsForDeviceAsync(tagPASSID idDevicePUID, string bstrAssociationsTypes, object userState) {
            if ((this.EnumerateAssociationsForDeviceOperationCompleted == null)) {
                this.EnumerateAssociationsForDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnumerateAssociationsForDeviceOperationCompleted);
            }
            this.InvokeAsync("EnumerateAssociationsForDevice", new object[] {
                        idDevicePUID,
                        bstrAssociationsTypes}, this.EnumerateAssociationsForDeviceOperationCompleted, userState);
        }
        
        private void OnEnumerateAssociationsForDeviceOperationCompleted(object arg) {
            if ((this.EnumerateAssociationsForDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnumerateAssociationsForDeviceCompleted(this, new EnumerateAssociationsForDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#AssociateDevice", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AssociateDevice(string bstrAssociationInfoXml) {
            this.Invoke("AssociateDevice", new object[] {
                        bstrAssociationInfoXml});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAssociateDevice(string bstrAssociationInfoXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AssociateDevice", new object[] {
                        bstrAssociationInfoXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAssociateDevice(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AssociateDeviceAsync(string bstrAssociationInfoXml) {
            this.AssociateDeviceAsync(bstrAssociationInfoXml, null);
        }
        
        /// <remarks/>
        public void AssociateDeviceAsync(string bstrAssociationInfoXml, object userState) {
            if ((this.AssociateDeviceOperationCompleted == null)) {
                this.AssociateDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssociateDeviceOperationCompleted);
            }
            this.InvokeAsync("AssociateDevice", new object[] {
                        bstrAssociationInfoXml}, this.AssociateDeviceOperationCompleted, userState);
        }
        
        private void OnAssociateDeviceOperationCompleted(object arg) {
            if ((this.AssociateDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AssociateDeviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#DisassociateDevice", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DisassociateDevice(tagPASSID idUserPUID, tagPASSID idDIDPUID, string bstrAssociationInfoXml) {
            this.Invoke("DisassociateDevice", new object[] {
                        idUserPUID,
                        idDIDPUID,
                        bstrAssociationInfoXml});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDisassociateDevice(tagPASSID idUserPUID, tagPASSID idDIDPUID, string bstrAssociationInfoXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DisassociateDevice", new object[] {
                        idUserPUID,
                        idDIDPUID,
                        bstrAssociationInfoXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDisassociateDevice(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DisassociateDeviceAsync(tagPASSID idUserPUID, tagPASSID idDIDPUID, string bstrAssociationInfoXml) {
            this.DisassociateDeviceAsync(idUserPUID, idDIDPUID, bstrAssociationInfoXml, null);
        }
        
        /// <remarks/>
        public void DisassociateDeviceAsync(tagPASSID idUserPUID, tagPASSID idDIDPUID, string bstrAssociationInfoXml, object userState) {
            if ((this.DisassociateDeviceOperationCompleted == null)) {
                this.DisassociateDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisassociateDeviceOperationCompleted);
            }
            this.InvokeAsync("DisassociateDevice", new object[] {
                        idUserPUID,
                        idDIDPUID,
                        bstrAssociationInfoXml}, this.DisassociateDeviceOperationCompleted, userState);
        }
        
        private void OnDisassociateDeviceOperationCompleted(object arg) {
            if ((this.DisassociateDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisassociateDeviceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#UpdateDeviceProperties", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateDeviceProperties(tagPASSID idDIDPUID, string bstrDeviceProperties) {
            this.Invoke("UpdateDeviceProperties", new object[] {
                        idDIDPUID,
                        bstrDeviceProperties});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateDeviceProperties(tagPASSID idDIDPUID, string bstrDeviceProperties, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateDeviceProperties", new object[] {
                        idDIDPUID,
                        bstrDeviceProperties}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateDeviceProperties(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateDevicePropertiesAsync(tagPASSID idDIDPUID, string bstrDeviceProperties) {
            this.UpdateDevicePropertiesAsync(idDIDPUID, bstrDeviceProperties, null);
        }
        
        /// <remarks/>
        public void UpdateDevicePropertiesAsync(tagPASSID idDIDPUID, string bstrDeviceProperties, object userState) {
            if ((this.UpdateDevicePropertiesOperationCompleted == null)) {
                this.UpdateDevicePropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDevicePropertiesOperationCompleted);
            }
            this.InvokeAsync("UpdateDeviceProperties", new object[] {
                        idDIDPUID,
                        bstrDeviceProperties}, this.UpdateDevicePropertiesOperationCompleted, userState);
        }
        
        private void OnUpdateDevicePropertiesOperationCompleted(object arg) {
            if ((this.UpdateDevicePropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDevicePropertiesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#QueryDeviceProperties", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrDeviceIdPropertiesXML")]
        public string QueryDeviceProperties(tagPASSID idDIDPUID, string bstrPropertyFilter) {
            object[] results = this.Invoke("QueryDeviceProperties", new object[] {
                        idDIDPUID,
                        bstrPropertyFilter});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginQueryDeviceProperties(tagPASSID idDIDPUID, string bstrPropertyFilter, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("QueryDeviceProperties", new object[] {
                        idDIDPUID,
                        bstrPropertyFilter}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndQueryDeviceProperties(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryDevicePropertiesAsync(tagPASSID idDIDPUID, string bstrPropertyFilter) {
            this.QueryDevicePropertiesAsync(idDIDPUID, bstrPropertyFilter, null);
        }
        
        /// <remarks/>
        public void QueryDevicePropertiesAsync(tagPASSID idDIDPUID, string bstrPropertyFilter, object userState) {
            if ((this.QueryDevicePropertiesOperationCompleted == null)) {
                this.QueryDevicePropertiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryDevicePropertiesOperationCompleted);
            }
            this.InvokeAsync("QueryDeviceProperties", new object[] {
                        idDIDPUID,
                        bstrPropertyFilter}, this.QueryDevicePropertiesOperationCompleted, userState);
        }
        
        private void OnQueryDevicePropertiesOperationCompleted(object arg) {
            if ((this.QueryDevicePropertiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryDevicePropertiesCompleted(this, new QueryDevicePropertiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#ConvertCredential", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ConvertCredential(tagPASSID PassIDIn, string bstrNewCredXML) {
            this.Invoke("ConvertCredential", new object[] {
                        PassIDIn,
                        bstrNewCredXML});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConvertCredential(tagPASSID PassIDIn, string bstrNewCredXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConvertCredential", new object[] {
                        PassIDIn,
                        bstrNewCredXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndConvertCredential(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ConvertCredentialAsync(tagPASSID PassIDIn, string bstrNewCredXML) {
            this.ConvertCredentialAsync(PassIDIn, bstrNewCredXML, null);
        }
        
        /// <remarks/>
        public void ConvertCredentialAsync(tagPASSID PassIDIn, string bstrNewCredXML, object userState) {
            if ((this.ConvertCredentialOperationCompleted == null)) {
                this.ConvertCredentialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertCredentialOperationCompleted);
            }
            this.InvokeAsync("ConvertCredential", new object[] {
                        PassIDIn,
                        bstrNewCredXML}, this.ConvertCredentialOperationCompleted, userState);
        }
        
        private void OnConvertCredentialOperationCompleted(object arg) {
            if ((this.ConvertCredentialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertCredentialCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#QueryNotifications", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("bstrNotificationsXML")]
        public string QueryNotifications(tagPASSID PassIDIn, string bstrQueryNotificationsXML) {
            object[] results = this.Invoke("QueryNotifications", new object[] {
                        PassIDIn,
                        bstrQueryNotificationsXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginQueryNotifications(tagPASSID PassIDIn, string bstrQueryNotificationsXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("QueryNotifications", new object[] {
                        PassIDIn,
                        bstrQueryNotificationsXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndQueryNotifications(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryNotificationsAsync(tagPASSID PassIDIn, string bstrQueryNotificationsXML) {
            this.QueryNotificationsAsync(PassIDIn, bstrQueryNotificationsXML, null);
        }
        
        /// <remarks/>
        public void QueryNotificationsAsync(tagPASSID PassIDIn, string bstrQueryNotificationsXML, object userState) {
            if ((this.QueryNotificationsOperationCompleted == null)) {
                this.QueryNotificationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryNotificationsOperationCompleted);
            }
            this.InvokeAsync("QueryNotifications", new object[] {
                        PassIDIn,
                        bstrQueryNotificationsXML}, this.QueryNotificationsOperationCompleted, userState);
        }
        
        private void OnQueryNotificationsOperationCompleted(object arg) {
            if ((this.QueryNotificationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryNotificationsCompleted(this, new QueryNotificationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#ConsumeNotifications", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ConsumeNotifications(tagPASSID PassIDIn, string bstrConsumeNotificationsXML) {
            this.Invoke("ConsumeNotifications", new object[] {
                        PassIDIn,
                        bstrConsumeNotificationsXML});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsumeNotifications(tagPASSID PassIDIn, string bstrConsumeNotificationsXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsumeNotifications", new object[] {
                        PassIDIn,
                        bstrConsumeNotificationsXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndConsumeNotifications(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ConsumeNotificationsAsync(tagPASSID PassIDIn, string bstrConsumeNotificationsXML) {
            this.ConsumeNotificationsAsync(PassIDIn, bstrConsumeNotificationsXML, null);
        }
        
        /// <remarks/>
        public void ConsumeNotificationsAsync(tagPASSID PassIDIn, string bstrConsumeNotificationsXML, object userState) {
            if ((this.ConsumeNotificationsOperationCompleted == null)) {
                this.ConsumeNotificationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConsumeNotificationsOperationCompleted);
            }
            this.InvokeAsync("ConsumeNotifications", new object[] {
                        PassIDIn,
                        bstrConsumeNotificationsXML}, this.ConsumeNotificationsOperationCompleted, userState);
        }
        
        private void OnConsumeNotificationsOperationCompleted(object arg) {
            if ((this.ConsumeNotificationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConsumeNotificationsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#AddProof", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrAddedProof")]
        public string AddProof(tagPASSID idUserPUID, string bstrProofData) {
            object[] results = this.Invoke("AddProof", new object[] {
                        idUserPUID,
                        bstrProofData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddProof(tagPASSID idUserPUID, string bstrProofData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddProof", new object[] {
                        idUserPUID,
                        bstrProofData}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAddProof(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddProofAsync(tagPASSID idUserPUID, string bstrProofData) {
            this.AddProofAsync(idUserPUID, bstrProofData, null);
        }
        
        /// <remarks/>
        public void AddProofAsync(tagPASSID idUserPUID, string bstrProofData, object userState) {
            if ((this.AddProofOperationCompleted == null)) {
                this.AddProofOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddProofOperationCompleted);
            }
            this.InvokeAsync("AddProof", new object[] {
                        idUserPUID,
                        bstrProofData}, this.AddProofOperationCompleted, userState);
        }
        
        private void OnAddProofOperationCompleted(object arg) {
            if ((this.AddProofCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddProofCompleted(this, new AddProofCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#ConfirmProof", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ConfirmProof(tagPASSID idUserPUID, string bstrProofData) {
            this.Invoke("ConfirmProof", new object[] {
                        idUserPUID,
                        bstrProofData});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConfirmProof(tagPASSID idUserPUID, string bstrProofData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConfirmProof", new object[] {
                        idUserPUID,
                        bstrProofData}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndConfirmProof(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ConfirmProofAsync(tagPASSID idUserPUID, string bstrProofData) {
            this.ConfirmProofAsync(idUserPUID, bstrProofData, null);
        }
        
        /// <remarks/>
        public void ConfirmProofAsync(tagPASSID idUserPUID, string bstrProofData, object userState) {
            if ((this.ConfirmProofOperationCompleted == null)) {
                this.ConfirmProofOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConfirmProofOperationCompleted);
            }
            this.InvokeAsync("ConfirmProof", new object[] {
                        idUserPUID,
                        bstrProofData}, this.ConfirmProofOperationCompleted, userState);
        }
        
        private void OnConfirmProofOperationCompleted(object arg) {
            if ((this.ConfirmProofCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConfirmProofCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#DeleteProof", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteProof(tagPASSID idUserPUID, string bstrProofData) {
            this.Invoke("DeleteProof", new object[] {
                        idUserPUID,
                        bstrProofData});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteProof(tagPASSID idUserPUID, string bstrProofData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteProof", new object[] {
                        idUserPUID,
                        bstrProofData}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteProof(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteProofAsync(tagPASSID idUserPUID, string bstrProofData) {
            this.DeleteProofAsync(idUserPUID, bstrProofData, null);
        }
        
        /// <remarks/>
        public void DeleteProofAsync(tagPASSID idUserPUID, string bstrProofData, object userState) {
            if ((this.DeleteProofOperationCompleted == null)) {
                this.DeleteProofOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteProofOperationCompleted);
            }
            this.InvokeAsync("DeleteProof", new object[] {
                        idUserPUID,
                        bstrProofData}, this.DeleteProofOperationCompleted, userState);
        }
        
        private void OnDeleteProofOperationCompleted(object arg) {
            if ((this.DeleteProofCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteProofCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#LostProofs", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void LostProofs(tagPASSID idUserPUID) {
            this.Invoke("LostProofs", new object[] {
                        idUserPUID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginLostProofs(tagPASSID idUserPUID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("LostProofs", new object[] {
                        idUserPUID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndLostProofs(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void LostProofsAsync(tagPASSID idUserPUID) {
            this.LostProofsAsync(idUserPUID, null);
        }
        
        /// <remarks/>
        public void LostProofsAsync(tagPASSID idUserPUID, object userState) {
            if ((this.LostProofsOperationCompleted == null)) {
                this.LostProofsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLostProofsOperationCompleted);
            }
            this.InvokeAsync("LostProofs", new object[] {
                        idUserPUID}, this.LostProofsOperationCompleted, userState);
        }
        
        private void OnLostProofsOperationCompleted(object arg) {
            if ((this.LostProofsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LostProofsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#GetUserProofState", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrProofs")]
        public string GetUserProofState(tagPASSID idUserPUID, eProofFilter epfFilter) {
            object[] results = this.Invoke("GetUserProofState", new object[] {
                        idUserPUID,
                        epfFilter});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUserProofState(tagPASSID idUserPUID, eProofFilter epfFilter, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUserProofState", new object[] {
                        idUserPUID,
                        epfFilter}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetUserProofState(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserProofStateAsync(tagPASSID idUserPUID, eProofFilter epfFilter) {
            this.GetUserProofStateAsync(idUserPUID, epfFilter, null);
        }
        
        /// <remarks/>
        public void GetUserProofStateAsync(tagPASSID idUserPUID, eProofFilter epfFilter, object userState) {
            if ((this.GetUserProofStateOperationCompleted == null)) {
                this.GetUserProofStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserProofStateOperationCompleted);
            }
            this.InvokeAsync("GetUserProofState", new object[] {
                        idUserPUID,
                        epfFilter}, this.GetUserProofStateOperationCompleted, userState);
        }
        
        private void OnGetUserProofStateOperationCompleted(object arg) {
            if ((this.GetUserProofStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserProofStateCompleted(this, new GetUserProofStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#SetAccountProtection", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetAccountProtection(tagPASSID idUserPUID, string bstrState) {
            this.Invoke("SetAccountProtection", new object[] {
                        idUserPUID,
                        bstrState});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetAccountProtection(tagPASSID idUserPUID, string bstrState, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetAccountProtection", new object[] {
                        idUserPUID,
                        bstrState}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetAccountProtection(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetAccountProtectionAsync(tagPASSID idUserPUID, string bstrState) {
            this.SetAccountProtectionAsync(idUserPUID, bstrState, null);
        }
        
        /// <remarks/>
        public void SetAccountProtectionAsync(tagPASSID idUserPUID, string bstrState, object userState) {
            if ((this.SetAccountProtectionOperationCompleted == null)) {
                this.SetAccountProtectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetAccountProtectionOperationCompleted);
            }
            this.InvokeAsync("SetAccountProtection", new object[] {
                        idUserPUID,
                        bstrState}, this.SetAccountProtectionOperationCompleted, userState);
        }
        
        private void OnSetAccountProtectionOperationCompleted(object arg) {
            if ((this.SetAccountProtectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetAccountProtectionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#GetAccountProtection", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrState")]
        public string GetAccountProtection(tagPASSID idUserPUID) {
            object[] results = this.Invoke("GetAccountProtection", new object[] {
                        idUserPUID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAccountProtection(tagPASSID idUserPUID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAccountProtection", new object[] {
                        idUserPUID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetAccountProtection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAccountProtectionAsync(tagPASSID idUserPUID) {
            this.GetAccountProtectionAsync(idUserPUID, null);
        }
        
        /// <remarks/>
        public void GetAccountProtectionAsync(tagPASSID idUserPUID, object userState) {
            if ((this.GetAccountProtectionOperationCompleted == null)) {
                this.GetAccountProtectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountProtectionOperationCompleted);
            }
            this.InvokeAsync("GetAccountProtection", new object[] {
                        idUserPUID}, this.GetAccountProtectionOperationCompleted, userState);
        }
        
        private void OnGetAccountProtectionOperationCompleted(object arg) {
            if ((this.GetAccountProtectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountProtectionCompleted(this, new GetAccountProtectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#SetUserPolicy", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetUserPolicy(tagPASSID idUserPUID, string bstrPolicy) {
            this.Invoke("SetUserPolicy", new object[] {
                        idUserPUID,
                        bstrPolicy});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetUserPolicy(tagPASSID idUserPUID, string bstrPolicy, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetUserPolicy", new object[] {
                        idUserPUID,
                        bstrPolicy}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetUserPolicy(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetUserPolicyAsync(tagPASSID idUserPUID, string bstrPolicy) {
            this.SetUserPolicyAsync(idUserPUID, bstrPolicy, null);
        }
        
        /// <remarks/>
        public void SetUserPolicyAsync(tagPASSID idUserPUID, string bstrPolicy, object userState) {
            if ((this.SetUserPolicyOperationCompleted == null)) {
                this.SetUserPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserPolicyOperationCompleted);
            }
            this.InvokeAsync("SetUserPolicy", new object[] {
                        idUserPUID,
                        bstrPolicy}, this.SetUserPolicyOperationCompleted, userState);
        }
        
        private void OnSetUserPolicyOperationCompleted(object arg) {
            if ((this.SetUserPolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserPolicyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#GetUserPolicy", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrPolicy")]
        public string GetUserPolicy(tagPASSID idUserPUID, string bstrPolicyFilter) {
            object[] results = this.Invoke("GetUserPolicy", new object[] {
                        idUserPUID,
                        bstrPolicyFilter});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUserPolicy(tagPASSID idUserPUID, string bstrPolicyFilter, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUserPolicy", new object[] {
                        idUserPUID,
                        bstrPolicyFilter}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetUserPolicy(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserPolicyAsync(tagPASSID idUserPUID, string bstrPolicyFilter) {
            this.GetUserPolicyAsync(idUserPUID, bstrPolicyFilter, null);
        }
        
        /// <remarks/>
        public void GetUserPolicyAsync(tagPASSID idUserPUID, string bstrPolicyFilter, object userState) {
            if ((this.GetUserPolicyOperationCompleted == null)) {
                this.GetUserPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserPolicyOperationCompleted);
            }
            this.InvokeAsync("GetUserPolicy", new object[] {
                        idUserPUID,
                        bstrPolicyFilter}, this.GetUserPolicyOperationCompleted, userState);
        }
        
        private void OnGetUserPolicyOperationCompleted(object arg) {
            if ((this.GetUserPolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserPolicyCompleted(this, new GetUserPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#UpdateChannelState", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateChannelState(string bstrChannelStateXML) {
            this.Invoke("UpdateChannelState", new object[] {
                        bstrChannelStateXML});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateChannelState(string bstrChannelStateXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateChannelState", new object[] {
                        bstrChannelStateXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateChannelState(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateChannelStateAsync(string bstrChannelStateXML) {
            this.UpdateChannelStateAsync(bstrChannelStateXML, null);
        }
        
        /// <remarks/>
        public void UpdateChannelStateAsync(string bstrChannelStateXML, object userState) {
            if ((this.UpdateChannelStateOperationCompleted == null)) {
                this.UpdateChannelStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateChannelStateOperationCompleted);
            }
            this.InvokeAsync("UpdateChannelState", new object[] {
                        bstrChannelStateXML}, this.UpdateChannelStateOperationCompleted, userState);
        }
        
        private void OnUpdateChannelStateOperationCompleted(object arg) {
            if ((this.UpdateChannelStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateChannelStateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#AddFamiliarLocation", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddFamiliarLocation(tagPASSID idUserPUID, string IP, string Options) {
            this.Invoke("AddFamiliarLocation", new object[] {
                        idUserPUID,
                        IP,
                        Options});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddFamiliarLocation(tagPASSID idUserPUID, string IP, string Options, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddFamiliarLocation", new object[] {
                        idUserPUID,
                        IP,
                        Options}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddFamiliarLocation(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AddFamiliarLocationAsync(tagPASSID idUserPUID, string IP, string Options) {
            this.AddFamiliarLocationAsync(idUserPUID, IP, Options, null);
        }
        
        /// <remarks/>
        public void AddFamiliarLocationAsync(tagPASSID idUserPUID, string IP, string Options, object userState) {
            if ((this.AddFamiliarLocationOperationCompleted == null)) {
                this.AddFamiliarLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddFamiliarLocationOperationCompleted);
            }
            this.InvokeAsync("AddFamiliarLocation", new object[] {
                        idUserPUID,
                        IP,
                        Options}, this.AddFamiliarLocationOperationCompleted, userState);
        }
        
        private void OnAddFamiliarLocationOperationCompleted(object arg) {
            if ((this.AddFamiliarLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddFamiliarLocationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#ReportCompromise", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("State")]
        public eReportCompromiseState ReportCompromise(tagPASSID PassID, string AlgorithmId, string CompromiseDetails, out short WaitPeriod) {
            object[] results = this.Invoke("ReportCompromise", new object[] {
                        PassID,
                        AlgorithmId,
                        CompromiseDetails});
            WaitPeriod = ((short)(results[1]));
            return ((eReportCompromiseState)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReportCompromise(tagPASSID PassID, string AlgorithmId, string CompromiseDetails, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReportCompromise", new object[] {
                        PassID,
                        AlgorithmId,
                        CompromiseDetails}, callback, asyncState);
        }
        
        /// <remarks/>
        public eReportCompromiseState EndReportCompromise(System.IAsyncResult asyncResult, out short WaitPeriod) {
            object[] results = this.EndInvoke(asyncResult);
            WaitPeriod = ((short)(results[1]));
            return ((eReportCompromiseState)(results[0]));
        }
        
        /// <remarks/>
        public void ReportCompromiseAsync(tagPASSID PassID, string AlgorithmId, string CompromiseDetails) {
            this.ReportCompromiseAsync(PassID, AlgorithmId, CompromiseDetails, null);
        }
        
        /// <remarks/>
        public void ReportCompromiseAsync(tagPASSID PassID, string AlgorithmId, string CompromiseDetails, object userState) {
            if ((this.ReportCompromiseOperationCompleted == null)) {
                this.ReportCompromiseOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReportCompromiseOperationCompleted);
            }
            this.InvokeAsync("ReportCompromise", new object[] {
                        PassID,
                        AlgorithmId,
                        CompromiseDetails}, this.ReportCompromiseOperationCompleted, userState);
        }
        
        private void OnReportCompromiseOperationCompleted(object arg) {
            if ((this.ReportCompromiseCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReportCompromiseCompleted(this, new ReportCompromiseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#GetEDUMigrationData", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrCredXML")]
        public string GetEDUMigrationData(tagPASSID PassID) {
            object[] results = this.Invoke("GetEDUMigrationData", new object[] {
                        PassID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetEDUMigrationData(tagPASSID PassID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetEDUMigrationData", new object[] {
                        PassID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetEDUMigrationData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetEDUMigrationDataAsync(tagPASSID PassID) {
            this.GetEDUMigrationDataAsync(PassID, null);
        }
        
        /// <remarks/>
        public void GetEDUMigrationDataAsync(tagPASSID PassID, object userState) {
            if ((this.GetEDUMigrationDataOperationCompleted == null)) {
                this.GetEDUMigrationDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEDUMigrationDataOperationCompleted);
            }
            this.InvokeAsync("GetEDUMigrationData", new object[] {
                        PassID}, this.GetEDUMigrationDataOperationCompleted, userState);
        }
        
        private void OnGetEDUMigrationDataOperationCompleted(object arg) {
            if ((this.GetEDUMigrationDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEDUMigrationDataCompleted(this, new GetEDUMigrationDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#DeleteDevices", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteDevices(tagPASSID idUserPUID) {
            this.Invoke("DeleteDevices", new object[] {
                        idUserPUID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteDevices(tagPASSID idUserPUID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteDevices", new object[] {
                        idUserPUID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteDevices(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteDevicesAsync(tagPASSID idUserPUID) {
            this.DeleteDevicesAsync(idUserPUID, null);
        }
        
        /// <remarks/>
        public void DeleteDevicesAsync(tagPASSID idUserPUID, object userState) {
            if ((this.DeleteDevicesOperationCompleted == null)) {
                this.DeleteDevicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDevicesOperationCompleted);
            }
            this.InvokeAsync("DeleteDevices", new object[] {
                        idUserPUID}, this.DeleteDevicesOperationCompleted, userState);
        }
        
        private void OnDeleteDevicesOperationCompleted(object arg) {
            if ((this.DeleteDevicesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDevicesCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#CreateApplicationPassword", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrCreatedPasswordXml")]
        public string CreateApplicationPassword(tagPASSID idUserPUID) {
            object[] results = this.Invoke("CreateApplicationPassword", new object[] {
                        idUserPUID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateApplicationPassword(tagPASSID idUserPUID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateApplicationPassword", new object[] {
                        idUserPUID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCreateApplicationPassword(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateApplicationPasswordAsync(tagPASSID idUserPUID) {
            this.CreateApplicationPasswordAsync(idUserPUID, null);
        }
        
        /// <remarks/>
        public void CreateApplicationPasswordAsync(tagPASSID idUserPUID, object userState) {
            if ((this.CreateApplicationPasswordOperationCompleted == null)) {
                this.CreateApplicationPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateApplicationPasswordOperationCompleted);
            }
            this.InvokeAsync("CreateApplicationPassword", new object[] {
                        idUserPUID}, this.CreateApplicationPasswordOperationCompleted, userState);
        }
        
        private void OnCreateApplicationPasswordOperationCompleted(object arg) {
            if ((this.CreateApplicationPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateApplicationPasswordCompleted(this, new CreateApplicationPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#ReadApplicationPassword", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrReadPasswordXml")]
        public string ReadApplicationPassword(tagPASSID idUserPUID) {
            object[] results = this.Invoke("ReadApplicationPassword", new object[] {
                        idUserPUID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReadApplicationPassword(tagPASSID idUserPUID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReadApplicationPassword", new object[] {
                        idUserPUID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndReadApplicationPassword(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReadApplicationPasswordAsync(tagPASSID idUserPUID) {
            this.ReadApplicationPasswordAsync(idUserPUID, null);
        }
        
        /// <remarks/>
        public void ReadApplicationPasswordAsync(tagPASSID idUserPUID, object userState) {
            if ((this.ReadApplicationPasswordOperationCompleted == null)) {
                this.ReadApplicationPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReadApplicationPasswordOperationCompleted);
            }
            this.InvokeAsync("ReadApplicationPassword", new object[] {
                        idUserPUID}, this.ReadApplicationPasswordOperationCompleted, userState);
        }
        
        private void OnReadApplicationPasswordOperationCompleted(object arg) {
            if ((this.ReadApplicationPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReadApplicationPasswordCompleted(this, new ReadApplicationPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#DeleteApplicationPassword", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteApplicationPassword(tagPASSID idUserPUID) {
            this.Invoke("DeleteApplicationPassword", new object[] {
                        idUserPUID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteApplicationPassword(tagPASSID idUserPUID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteApplicationPassword", new object[] {
                        idUserPUID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteApplicationPassword(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteApplicationPasswordAsync(tagPASSID idUserPUID) {
            this.DeleteApplicationPasswordAsync(idUserPUID, null);
        }
        
        /// <remarks/>
        public void DeleteApplicationPasswordAsync(tagPASSID idUserPUID, object userState) {
            if ((this.DeleteApplicationPasswordOperationCompleted == null)) {
                this.DeleteApplicationPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteApplicationPasswordOperationCompleted);
            }
            this.InvokeAsync("DeleteApplicationPassword", new object[] {
                        idUserPUID}, this.DeleteApplicationPasswordOperationCompleted, userState);
        }
        
        private void OnDeleteApplicationPasswordOperationCompleted(object arg) {
            if ((this.DeleteApplicationPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteApplicationPasswordCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#SetUserNotificationState", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetUserNotificationState(tagPASSID idUserPUID, string bstrNotificationStateXML) {
            this.Invoke("SetUserNotificationState", new object[] {
                        idUserPUID,
                        bstrNotificationStateXML});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetUserNotificationState(tagPASSID idUserPUID, string bstrNotificationStateXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetUserNotificationState", new object[] {
                        idUserPUID,
                        bstrNotificationStateXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetUserNotificationState(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetUserNotificationStateAsync(tagPASSID idUserPUID, string bstrNotificationStateXML) {
            this.SetUserNotificationStateAsync(idUserPUID, bstrNotificationStateXML, null);
        }
        
        /// <remarks/>
        public void SetUserNotificationStateAsync(tagPASSID idUserPUID, string bstrNotificationStateXML, object userState) {
            if ((this.SetUserNotificationStateOperationCompleted == null)) {
                this.SetUserNotificationStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetUserNotificationStateOperationCompleted);
            }
            this.InvokeAsync("SetUserNotificationState", new object[] {
                        idUserPUID,
                        bstrNotificationStateXML}, this.SetUserNotificationStateOperationCompleted, userState);
        }
        
        private void OnSetUserNotificationStateOperationCompleted(object arg) {
            if ((this.SetUserNotificationStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetUserNotificationStateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#FlagActivity", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FlagActivity(tagPASSID PassID, string FlagDetails) {
            this.Invoke("FlagActivity", new object[] {
                        PassID,
                        FlagDetails});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFlagActivity(tagPASSID PassID, string FlagDetails, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FlagActivity", new object[] {
                        PassID,
                        FlagDetails}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndFlagActivity(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void FlagActivityAsync(tagPASSID PassID, string FlagDetails) {
            this.FlagActivityAsync(PassID, FlagDetails, null);
        }
        
        /// <remarks/>
        public void FlagActivityAsync(tagPASSID PassID, string FlagDetails, object userState) {
            if ((this.FlagActivityOperationCompleted == null)) {
                this.FlagActivityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFlagActivityOperationCompleted);
            }
            this.InvokeAsync("FlagActivity", new object[] {
                        PassID,
                        FlagDetails}, this.FlagActivityOperationCompleted, userState);
        }
        
        private void OnFlagActivityOperationCompleted(object arg) {
            if ((this.FlagActivityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FlagActivityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#MakeAliasPrimary", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MakeAliasPrimary(tagPASSID PassIDIn, string bstrNewPrimaryAlias, string bstrOptionalParams) {
            this.Invoke("MakeAliasPrimary", new object[] {
                        PassIDIn,
                        bstrNewPrimaryAlias,
                        bstrOptionalParams});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMakeAliasPrimary(tagPASSID PassIDIn, string bstrNewPrimaryAlias, string bstrOptionalParams, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MakeAliasPrimary", new object[] {
                        PassIDIn,
                        bstrNewPrimaryAlias,
                        bstrOptionalParams}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndMakeAliasPrimary(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void MakeAliasPrimaryAsync(tagPASSID PassIDIn, string bstrNewPrimaryAlias, string bstrOptionalParams) {
            this.MakeAliasPrimaryAsync(PassIDIn, bstrNewPrimaryAlias, bstrOptionalParams, null);
        }
        
        /// <remarks/>
        public void MakeAliasPrimaryAsync(tagPASSID PassIDIn, string bstrNewPrimaryAlias, string bstrOptionalParams, object userState) {
            if ((this.MakeAliasPrimaryOperationCompleted == null)) {
                this.MakeAliasPrimaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMakeAliasPrimaryOperationCompleted);
            }
            this.InvokeAsync("MakeAliasPrimary", new object[] {
                        PassIDIn,
                        bstrNewPrimaryAlias,
                        bstrOptionalParams}, this.MakeAliasPrimaryOperationCompleted, userState);
        }
        
        private void OnMakeAliasPrimaryOperationCompleted(object arg) {
            if ((this.MakeAliasPrimaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MakeAliasPrimaryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#QueryAccountNames", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrAccountNames")]
        public string QueryAccountNames(tagPASSID passId, eAccountNameTypeFlags lTypeFlags, string bstrOptionalParams) {
            object[] results = this.Invoke("QueryAccountNames", new object[] {
                        passId,
                        lTypeFlags,
                        bstrOptionalParams});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginQueryAccountNames(tagPASSID passId, eAccountNameTypeFlags lTypeFlags, string bstrOptionalParams, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("QueryAccountNames", new object[] {
                        passId,
                        lTypeFlags,
                        bstrOptionalParams}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndQueryAccountNames(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryAccountNamesAsync(tagPASSID passId, eAccountNameTypeFlags lTypeFlags, string bstrOptionalParams) {
            this.QueryAccountNamesAsync(passId, lTypeFlags, bstrOptionalParams, null);
        }
        
        /// <remarks/>
        public void QueryAccountNamesAsync(tagPASSID passId, eAccountNameTypeFlags lTypeFlags, string bstrOptionalParams, object userState) {
            if ((this.QueryAccountNamesOperationCompleted == null)) {
                this.QueryAccountNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryAccountNamesOperationCompleted);
            }
            this.InvokeAsync("QueryAccountNames", new object[] {
                        passId,
                        lTypeFlags,
                        bstrOptionalParams}, this.QueryAccountNamesOperationCompleted, userState);
        }
        
        private void OnQueryAccountNamesOperationCompleted(object arg) {
            if ((this.QueryAccountNamesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryAccountNamesCompleted(this, new QueryAccountNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#CloseAccount", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrCloseAccountResponse")]
        public string CloseAccount(string bstrNetID, string bstrOptionalParams) {
            object[] results = this.Invoke("CloseAccount", new object[] {
                        bstrNetID,
                        bstrOptionalParams});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCloseAccount(string bstrNetID, string bstrOptionalParams, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CloseAccount", new object[] {
                        bstrNetID,
                        bstrOptionalParams}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCloseAccount(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CloseAccountAsync(string bstrNetID, string bstrOptionalParams) {
            this.CloseAccountAsync(bstrNetID, bstrOptionalParams, null);
        }
        
        /// <remarks/>
        public void CloseAccountAsync(string bstrNetID, string bstrOptionalParams, object userState) {
            if ((this.CloseAccountOperationCompleted == null)) {
                this.CloseAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseAccountOperationCompleted);
            }
            this.InvokeAsync("CloseAccount", new object[] {
                        bstrNetID,
                        bstrOptionalParams}, this.CloseAccountOperationCompleted, userState);
        }
        
        private void OnCloseAccountOperationCompleted(object arg) {
            if ((this.CloseAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseAccountCompleted(this, new CloseAccountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#RecoverAccount", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RecoverAccount(string bstrNetID) {
            this.Invoke("RecoverAccount", new object[] {
                        bstrNetID});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRecoverAccount(string bstrNetID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RecoverAccount", new object[] {
                        bstrNetID}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRecoverAccount(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RecoverAccountAsync(string bstrNetID) {
            this.RecoverAccountAsync(bstrNetID, null);
        }
        
        /// <remarks/>
        public void RecoverAccountAsync(string bstrNetID, object userState) {
            if ((this.RecoverAccountOperationCompleted == null)) {
                this.RecoverAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRecoverAccountOperationCompleted);
            }
            this.InvokeAsync("RecoverAccount", new object[] {
                        bstrNetID}, this.RecoverAccountOperationCompleted, userState);
        }
        
        private void OnRecoverAccountOperationCompleted(object arg) {
            if ((this.RecoverAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RecoverAccountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#UpdateApprover", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateApprover(tagPASSID PassID, string bstrChannelIDXML) {
            this.Invoke("UpdateApprover", new object[] {
                        PassID,
                        bstrChannelIDXML});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateApprover(tagPASSID PassID, string bstrChannelIDXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateApprover", new object[] {
                        PassID,
                        bstrChannelIDXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateApprover(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateApproverAsync(tagPASSID PassID, string bstrChannelIDXML) {
            this.UpdateApproverAsync(PassID, bstrChannelIDXML, null);
        }
        
        /// <remarks/>
        public void UpdateApproverAsync(tagPASSID PassID, string bstrChannelIDXML, object userState) {
            if ((this.UpdateApproverOperationCompleted == null)) {
                this.UpdateApproverOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateApproverOperationCompleted);
            }
            this.InvokeAsync("UpdateApprover", new object[] {
                        PassID,
                        bstrChannelIDXML}, this.UpdateApproverOperationCompleted, userState);
        }
        
        private void OnUpdateApproverOperationCompleted(object arg) {
            if ((this.UpdateApproverCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateApproverCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#RemoveApprover", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveApprover(tagPASSID PassID, string bstrChannelIDXML) {
            this.Invoke("RemoveApprover", new object[] {
                        PassID,
                        bstrChannelIDXML});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveApprover(tagPASSID PassID, string bstrChannelIDXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveApprover", new object[] {
                        PassID,
                        bstrChannelIDXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRemoveApprover(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RemoveApproverAsync(tagPASSID PassID, string bstrChannelIDXML) {
            this.RemoveApproverAsync(PassID, bstrChannelIDXML, null);
        }
        
        /// <remarks/>
        public void RemoveApproverAsync(tagPASSID PassID, string bstrChannelIDXML, object userState) {
            if ((this.RemoveApproverOperationCompleted == null)) {
                this.RemoveApproverOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveApproverOperationCompleted);
            }
            this.InvokeAsync("RemoveApprover", new object[] {
                        PassID,
                        bstrChannelIDXML}, this.RemoveApproverOperationCompleted, userState);
        }
        
        private void OnRemoveApproverOperationCompleted(object arg) {
            if ((this.RemoveApproverCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveApproverCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#MessageDispatcherCallback", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrOutput")]
        public string MessageDispatcherCallback(tagPASSID PassID, string bstrMethodName, string bstrParameters) {
            object[] results = this.Invoke("MessageDispatcherCallback", new object[] {
                        PassID,
                        bstrMethodName,
                        bstrParameters});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMessageDispatcherCallback(tagPASSID PassID, string bstrMethodName, string bstrParameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MessageDispatcherCallback", new object[] {
                        PassID,
                        bstrMethodName,
                        bstrParameters}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndMessageDispatcherCallback(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void MessageDispatcherCallbackAsync(tagPASSID PassID, string bstrMethodName, string bstrParameters) {
            this.MessageDispatcherCallbackAsync(PassID, bstrMethodName, bstrParameters, null);
        }
        
        /// <remarks/>
        public void MessageDispatcherCallbackAsync(tagPASSID PassID, string bstrMethodName, string bstrParameters, object userState) {
            if ((this.MessageDispatcherCallbackOperationCompleted == null)) {
                this.MessageDispatcherCallbackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMessageDispatcherCallbackOperationCompleted);
            }
            this.InvokeAsync("MessageDispatcherCallback", new object[] {
                        PassID,
                        bstrMethodName,
                        bstrParameters}, this.MessageDispatcherCallbackOperationCompleted, userState);
        }
        
        private void OnMessageDispatcherCallbackOperationCompleted(object arg) {
            if ((this.MessageDispatcherCallbackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MessageDispatcherCallbackCompleted(this, new MessageDispatcherCallbackCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#RequestMessage", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrRequestMessageResultXML")]
        public string RequestMessage(tagPASSID PassID, string bstrRequestMessageXML) {
            object[] results = this.Invoke("RequestMessage", new object[] {
                        PassID,
                        bstrRequestMessageXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRequestMessage(tagPASSID PassID, string bstrRequestMessageXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RequestMessage", new object[] {
                        PassID,
                        bstrRequestMessageXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRequestMessage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RequestMessageAsync(tagPASSID PassID, string bstrRequestMessageXML) {
            this.RequestMessageAsync(PassID, bstrRequestMessageXML, null);
        }
        
        /// <remarks/>
        public void RequestMessageAsync(tagPASSID PassID, string bstrRequestMessageXML, object userState) {
            if ((this.RequestMessageOperationCompleted == null)) {
                this.RequestMessageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestMessageOperationCompleted);
            }
            this.InvokeAsync("RequestMessage", new object[] {
                        PassID,
                        bstrRequestMessageXML}, this.RequestMessageOperationCompleted, userState);
        }
        
        private void OnRequestMessageOperationCompleted(object arg) {
            if ((this.RequestMessageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestMessageCompleted(this, new RequestMessageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#EnumerateDeviceEx", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrDevicesXML")]
        public string EnumerateDeviceEx(tagPASSID PassID, string bstrOptionalParamXML) {
            object[] results = this.Invoke("EnumerateDeviceEx", new object[] {
                        PassID,
                        bstrOptionalParamXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumerateDeviceEx(tagPASSID PassID, string bstrOptionalParamXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumerateDeviceEx", new object[] {
                        PassID,
                        bstrOptionalParamXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndEnumerateDeviceEx(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EnumerateDeviceExAsync(tagPASSID PassID, string bstrOptionalParamXML) {
            this.EnumerateDeviceExAsync(PassID, bstrOptionalParamXML, null);
        }
        
        /// <remarks/>
        public void EnumerateDeviceExAsync(tagPASSID PassID, string bstrOptionalParamXML, object userState) {
            if ((this.EnumerateDeviceExOperationCompleted == null)) {
                this.EnumerateDeviceExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnumerateDeviceExOperationCompleted);
            }
            this.InvokeAsync("EnumerateDeviceEx", new object[] {
                        PassID,
                        bstrOptionalParamXML}, this.EnumerateDeviceExOperationCompleted, userState);
        }
        
        private void OnEnumerateDeviceExOperationCompleted(object arg) {
            if ((this.EnumerateDeviceExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnumerateDeviceExCompleted(this, new EnumerateDeviceExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#CheckCredentialPolicy", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CheckCredentialPolicy(string bstrCredXML) {
            this.Invoke("CheckCredentialPolicy", new object[] {
                        bstrCredXML});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckCredentialPolicy(string bstrCredXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckCredentialPolicy", new object[] {
                        bstrCredXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCheckCredentialPolicy(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CheckCredentialPolicyAsync(string bstrCredXML) {
            this.CheckCredentialPolicyAsync(bstrCredXML, null);
        }
        
        /// <remarks/>
        public void CheckCredentialPolicyAsync(string bstrCredXML, object userState) {
            if ((this.CheckCredentialPolicyOperationCompleted == null)) {
                this.CheckCredentialPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckCredentialPolicyOperationCompleted);
            }
            this.InvokeAsync("CheckCredentialPolicy", new object[] {
                        bstrCredXML}, this.CheckCredentialPolicyOperationCompleted, userState);
        }
        
        private void OnCheckCredentialPolicyOperationCompleted(object arg) {
            if ((this.CheckCredentialPolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckCredentialPolicyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#GetIPLocation", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrLocationXml")]
        public string GetIPLocation(string bstrIP) {
            object[] results = this.Invoke("GetIPLocation", new object[] {
                        bstrIP});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetIPLocation(string bstrIP, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetIPLocation", new object[] {
                        bstrIP}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetIPLocation(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIPLocationAsync(string bstrIP) {
            this.GetIPLocationAsync(bstrIP, null);
        }
        
        /// <remarks/>
        public void GetIPLocationAsync(string bstrIP, object userState) {
            if ((this.GetIPLocationOperationCompleted == null)) {
                this.GetIPLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIPLocationOperationCompleted);
            }
            this.InvokeAsync("GetIPLocation", new object[] {
                        bstrIP}, this.GetIPLocationOperationCompleted, userState);
        }
        
        private void OnGetIPLocationOperationCompleted(object arg) {
            if ((this.GetIPLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIPLocationCompleted(this, new GetIPLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#QueryAccountNamesEx", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrAccountNames")]
        public string QueryAccountNamesEx(tagPASSID passId, tagNameType nameType, string bstrOptionalParams) {
            object[] results = this.Invoke("QueryAccountNamesEx", new object[] {
                        passId,
                        nameType,
                        bstrOptionalParams});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginQueryAccountNamesEx(tagPASSID passId, tagNameType nameType, string bstrOptionalParams, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("QueryAccountNamesEx", new object[] {
                        passId,
                        nameType,
                        bstrOptionalParams}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndQueryAccountNamesEx(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void QueryAccountNamesExAsync(tagPASSID passId, tagNameType nameType, string bstrOptionalParams) {
            this.QueryAccountNamesExAsync(passId, nameType, bstrOptionalParams, null);
        }
        
        /// <remarks/>
        public void QueryAccountNamesExAsync(tagPASSID passId, tagNameType nameType, string bstrOptionalParams, object userState) {
            if ((this.QueryAccountNamesExOperationCompleted == null)) {
                this.QueryAccountNamesExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnQueryAccountNamesExOperationCompleted);
            }
            this.InvokeAsync("QueryAccountNamesEx", new object[] {
                        passId,
                        nameType,
                        bstrOptionalParams}, this.QueryAccountNamesExOperationCompleted, userState);
        }
        
        private void OnQueryAccountNamesExOperationCompleted(object arg) {
            if ((this.QueryAccountNamesExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.QueryAccountNamesExCompleted(this, new QueryAccountNamesExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#DisassociateDeviceEx", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrResponseXML")]
        public string DisassociateDeviceEx(tagPASSID PassID, string bstrParamXML) {
            object[] results = this.Invoke("DisassociateDeviceEx", new object[] {
                        PassID,
                        bstrParamXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDisassociateDeviceEx(tagPASSID PassID, string bstrParamXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DisassociateDeviceEx", new object[] {
                        PassID,
                        bstrParamXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndDisassociateDeviceEx(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DisassociateDeviceExAsync(tagPASSID PassID, string bstrParamXML) {
            this.DisassociateDeviceExAsync(PassID, bstrParamXML, null);
        }
        
        /// <remarks/>
        public void DisassociateDeviceExAsync(tagPASSID PassID, string bstrParamXML, object userState) {
            if ((this.DisassociateDeviceExOperationCompleted == null)) {
                this.DisassociateDeviceExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisassociateDeviceExOperationCompleted);
            }
            this.InvokeAsync("DisassociateDeviceEx", new object[] {
                        PassID,
                        bstrParamXML}, this.DisassociateDeviceExOperationCompleted, userState);
        }
        
        private void OnDisassociateDeviceExOperationCompleted(object arg) {
            if ((this.DisassociateDeviceExCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisassociateDeviceExCompleted(this, new DisassociateDeviceExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#MoveAlias", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void MoveAlias(tagPASSID passId, string bstrMoveAliasFlowToken, string bstrAliasToMove, string bstrOptionalParams) {
            this.Invoke("MoveAlias", new object[] {
                        passId,
                        bstrMoveAliasFlowToken,
                        bstrAliasToMove,
                        bstrOptionalParams});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMoveAlias(tagPASSID passId, string bstrMoveAliasFlowToken, string bstrAliasToMove, string bstrOptionalParams, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MoveAlias", new object[] {
                        passId,
                        bstrMoveAliasFlowToken,
                        bstrAliasToMove,
                        bstrOptionalParams}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndMoveAlias(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void MoveAliasAsync(tagPASSID passId, string bstrMoveAliasFlowToken, string bstrAliasToMove, string bstrOptionalParams) {
            this.MoveAliasAsync(passId, bstrMoveAliasFlowToken, bstrAliasToMove, bstrOptionalParams, null);
        }
        
        /// <remarks/>
        public void MoveAliasAsync(tagPASSID passId, string bstrMoveAliasFlowToken, string bstrAliasToMove, string bstrOptionalParams, object userState) {
            if ((this.MoveAliasOperationCompleted == null)) {
                this.MoveAliasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMoveAliasOperationCompleted);
            }
            this.InvokeAsync("MoveAlias", new object[] {
                        passId,
                        bstrMoveAliasFlowToken,
                        bstrAliasToMove,
                        bstrOptionalParams}, this.MoveAliasOperationCompleted, userState);
        }
        
        private void OnMoveAliasOperationCompleted(object arg) {
            if ((this.MoveAliasCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MoveAliasCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#ProvisionNetID", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrResponseXML")]
        public string ProvisionNetID(string bstrParamXML) {
            object[] results = this.Invoke("ProvisionNetID", new object[] {
                        bstrParamXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginProvisionNetID(string bstrParamXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ProvisionNetID", new object[] {
                        bstrParamXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndProvisionNetID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProvisionNetIDAsync(string bstrParamXML) {
            this.ProvisionNetIDAsync(bstrParamXML, null);
        }
        
        /// <remarks/>
        public void ProvisionNetIDAsync(string bstrParamXML, object userState) {
            if ((this.ProvisionNetIDOperationCompleted == null)) {
                this.ProvisionNetIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProvisionNetIDOperationCompleted);
            }
            this.InvokeAsync("ProvisionNetID", new object[] {
                        bstrParamXML}, this.ProvisionNetIDOperationCompleted, userState);
        }
        
        private void OnProvisionNetIDOperationCompleted(object arg) {
            if ((this.ProvisionNetIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProvisionNetIDCompleted(this, new ProvisionNetIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#GetAccountsForProof", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetAccountsForProofResponseXML")]
        public string GetAccountsForProof(string GetAccountsForProofRequestXML) {
            object[] results = this.Invoke("GetAccountsForProof", new object[] {
                        GetAccountsForProofRequestXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAccountsForProof(string GetAccountsForProofRequestXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAccountsForProof", new object[] {
                        GetAccountsForProofRequestXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetAccountsForProof(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAccountsForProofAsync(string GetAccountsForProofRequestXML) {
            this.GetAccountsForProofAsync(GetAccountsForProofRequestXML, null);
        }
        
        /// <remarks/>
        public void GetAccountsForProofAsync(string GetAccountsForProofRequestXML, object userState) {
            if ((this.GetAccountsForProofOperationCompleted == null)) {
                this.GetAccountsForProofOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAccountsForProofOperationCompleted);
            }
            this.InvokeAsync("GetAccountsForProof", new object[] {
                        GetAccountsForProofRequestXML}, this.GetAccountsForProofOperationCompleted, userState);
        }
        
        private void OnGetAccountsForProofOperationCompleted(object arg) {
            if ((this.GetAccountsForProofCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAccountsForProofCompleted(this, new GetAccountsForProofCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#GetIDPAccessToken", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetIDPAccessTokenResponse")]
        public string GetIDPAccessToken(tagPASSID passId, string bstrIDPInfoXML) {
            object[] results = this.Invoke("GetIDPAccessToken", new object[] {
                        passId,
                        bstrIDPInfoXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetIDPAccessToken(tagPASSID passId, string bstrIDPInfoXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetIDPAccessToken", new object[] {
                        passId,
                        bstrIDPInfoXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetIDPAccessToken(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetIDPAccessTokenAsync(tagPASSID passId, string bstrIDPInfoXML) {
            this.GetIDPAccessTokenAsync(passId, bstrIDPInfoXML, null);
        }
        
        /// <remarks/>
        public void GetIDPAccessTokenAsync(tagPASSID passId, string bstrIDPInfoXML, object userState) {
            if ((this.GetIDPAccessTokenOperationCompleted == null)) {
                this.GetIDPAccessTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetIDPAccessTokenOperationCompleted);
            }
            this.InvokeAsync("GetIDPAccessToken", new object[] {
                        passId,
                        bstrIDPInfoXML}, this.GetIDPAccessTokenOperationCompleted, userState);
        }
        
        private void OnGetIDPAccessTokenOperationCompleted(object arg) {
            if ((this.GetIDPAccessTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetIDPAccessTokenCompleted(this, new GetIDPAccessTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#UpdateIDPBindState", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("UpdateIDPBindStateResponse")]
        public string UpdateIDPBindState(tagPASSID passId, string bstrIDPInfoXML) {
            object[] results = this.Invoke("UpdateIDPBindState", new object[] {
                        passId,
                        bstrIDPInfoXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateIDPBindState(tagPASSID passId, string bstrIDPInfoXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateIDPBindState", new object[] {
                        passId,
                        bstrIDPInfoXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndUpdateIDPBindState(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateIDPBindStateAsync(tagPASSID passId, string bstrIDPInfoXML) {
            this.UpdateIDPBindStateAsync(passId, bstrIDPInfoXML, null);
        }
        
        /// <remarks/>
        public void UpdateIDPBindStateAsync(tagPASSID passId, string bstrIDPInfoXML, object userState) {
            if ((this.UpdateIDPBindStateOperationCompleted == null)) {
                this.UpdateIDPBindStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateIDPBindStateOperationCompleted);
            }
            this.InvokeAsync("UpdateIDPBindState", new object[] {
                        passId,
                        bstrIDPInfoXML}, this.UpdateIDPBindStateOperationCompleted, userState);
        }
        
        private void OnUpdateIDPBindStateOperationCompleted(object arg) {
            if ((this.UpdateIDPBindStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateIDPBindStateCompleted(this, new UpdateIDPBindStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#ProvisionDevice", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrResponseXML")]
        public string ProvisionDevice(string bstrParamXML) {
            object[] results = this.Invoke("ProvisionDevice", new object[] {
                        bstrParamXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginProvisionDevice(string bstrParamXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ProvisionDevice", new object[] {
                        bstrParamXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndProvisionDevice(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ProvisionDeviceAsync(string bstrParamXML) {
            this.ProvisionDeviceAsync(bstrParamXML, null);
        }
        
        /// <remarks/>
        public void ProvisionDeviceAsync(string bstrParamXML, object userState) {
            if ((this.ProvisionDeviceOperationCompleted == null)) {
                this.ProvisionDeviceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnProvisionDeviceOperationCompleted);
            }
            this.InvokeAsync("ProvisionDevice", new object[] {
                        bstrParamXML}, this.ProvisionDeviceOperationCompleted, userState);
        }
        
        private void OnProvisionDeviceOperationCompleted(object arg) {
            if ((this.ProvisionDeviceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ProvisionDeviceCompleted(this, new ProvisionDeviceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#GetGdprVerifier", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrGdprRequestId")]
        public string GetGdprVerifier(tagPASSID passID, eGDPR_VERIFIER_OPERATION eOperation, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] string[] rgBstrAdditionalClaimNames, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] string[] rgBstrAdditionalClaimValues, string bstrOptionalParams, out string pbstrGdprVerifier) {
            object[] results = this.Invoke("GetGdprVerifier", new object[] {
                        passID,
                        eOperation,
                        rgBstrAdditionalClaimNames,
                        rgBstrAdditionalClaimValues,
                        bstrOptionalParams});
            pbstrGdprVerifier = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetGdprVerifier(tagPASSID passID, eGDPR_VERIFIER_OPERATION eOperation, string[] rgBstrAdditionalClaimNames, string[] rgBstrAdditionalClaimValues, string bstrOptionalParams, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetGdprVerifier", new object[] {
                        passID,
                        eOperation,
                        rgBstrAdditionalClaimNames,
                        rgBstrAdditionalClaimValues,
                        bstrOptionalParams}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetGdprVerifier(System.IAsyncResult asyncResult, out string pbstrGdprVerifier) {
            object[] results = this.EndInvoke(asyncResult);
            pbstrGdprVerifier = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetGdprVerifierAsync(tagPASSID passID, eGDPR_VERIFIER_OPERATION eOperation, string[] rgBstrAdditionalClaimNames, string[] rgBstrAdditionalClaimValues, string bstrOptionalParams) {
            this.GetGdprVerifierAsync(passID, eOperation, rgBstrAdditionalClaimNames, rgBstrAdditionalClaimValues, bstrOptionalParams, null);
        }
        
        /// <remarks/>
        public void GetGdprVerifierAsync(tagPASSID passID, eGDPR_VERIFIER_OPERATION eOperation, string[] rgBstrAdditionalClaimNames, string[] rgBstrAdditionalClaimValues, string bstrOptionalParams, object userState) {
            if ((this.GetGdprVerifierOperationCompleted == null)) {
                this.GetGdprVerifierOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGdprVerifierOperationCompleted);
            }
            this.InvokeAsync("GetGdprVerifier", new object[] {
                        passID,
                        eOperation,
                        rgBstrAdditionalClaimNames,
                        rgBstrAdditionalClaimValues,
                        bstrOptionalParams}, this.GetGdprVerifierOperationCompleted, userState);
        }
        
        private void OnGetGdprVerifierOperationCompleted(object arg) {
            if ((this.GetGdprVerifierCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGdprVerifierCompleted(this, new GetGdprVerifierCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#EnumNextGenCredentials", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrNgcXML")]
        public string EnumNextGenCredentials(tagPASSID passId) {
            object[] results = this.Invoke("EnumNextGenCredentials", new object[] {
                        passId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumNextGenCredentials(tagPASSID passId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumNextGenCredentials", new object[] {
                        passId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndEnumNextGenCredentials(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void EnumNextGenCredentialsAsync(tagPASSID passId) {
            this.EnumNextGenCredentialsAsync(passId, null);
        }
        
        /// <remarks/>
        public void EnumNextGenCredentialsAsync(tagPASSID passId, object userState) {
            if ((this.EnumNextGenCredentialsOperationCompleted == null)) {
                this.EnumNextGenCredentialsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnumNextGenCredentialsOperationCompleted);
            }
            this.InvokeAsync("EnumNextGenCredentials", new object[] {
                        passId}, this.EnumNextGenCredentialsOperationCompleted, userState);
        }
        
        private void OnEnumNextGenCredentialsOperationCompleted(object arg) {
            if ((this.EnumNextGenCredentialsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnumNextGenCredentialsCompleted(this, new EnumNextGenCredentialsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#RemoveNextGenCredential", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RemoveNextGenCredential(tagPASSID passId, string bstrKeyId) {
            this.Invoke("RemoveNextGenCredential", new object[] {
                        passId,
                        bstrKeyId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemoveNextGenCredential(tagPASSID passId, string bstrKeyId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemoveNextGenCredential", new object[] {
                        passId,
                        bstrKeyId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRemoveNextGenCredential(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RemoveNextGenCredentialAsync(tagPASSID passId, string bstrKeyId) {
            this.RemoveNextGenCredentialAsync(passId, bstrKeyId, null);
        }
        
        /// <remarks/>
        public void RemoveNextGenCredentialAsync(tagPASSID passId, string bstrKeyId, object userState) {
            if ((this.RemoveNextGenCredentialOperationCompleted == null)) {
                this.RemoveNextGenCredentialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveNextGenCredentialOperationCompleted);
            }
            this.InvokeAsync("RemoveNextGenCredential", new object[] {
                        passId,
                        bstrKeyId}, this.RemoveNextGenCredentialOperationCompleted, userState);
        }
        
        private void OnRemoveNextGenCredentialOperationCompleted(object arg) {
            if ((this.RemoveNextGenCredentialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveNextGenCredentialCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#ReplayGdprVerifier", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrGdprRequestId")]
        public string ReplayGdprVerifier(tagPASSID passID, eGDPR_VERIFIER_OPERATION eOperation, string bstrGdprVerifierOld, string bstrOptionalParams, out string pbstrGdprVerifierNew) {
            object[] results = this.Invoke("ReplayGdprVerifier", new object[] {
                        passID,
                        eOperation,
                        bstrGdprVerifierOld,
                        bstrOptionalParams});
            pbstrGdprVerifierNew = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReplayGdprVerifier(tagPASSID passID, eGDPR_VERIFIER_OPERATION eOperation, string bstrGdprVerifierOld, string bstrOptionalParams, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReplayGdprVerifier", new object[] {
                        passID,
                        eOperation,
                        bstrGdprVerifierOld,
                        bstrOptionalParams}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndReplayGdprVerifier(System.IAsyncResult asyncResult, out string pbstrGdprVerifierNew) {
            object[] results = this.EndInvoke(asyncResult);
            pbstrGdprVerifierNew = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ReplayGdprVerifierAsync(tagPASSID passID, eGDPR_VERIFIER_OPERATION eOperation, string bstrGdprVerifierOld, string bstrOptionalParams) {
            this.ReplayGdprVerifierAsync(passID, eOperation, bstrGdprVerifierOld, bstrOptionalParams, null);
        }
        
        /// <remarks/>
        public void ReplayGdprVerifierAsync(tagPASSID passID, eGDPR_VERIFIER_OPERATION eOperation, string bstrGdprVerifierOld, string bstrOptionalParams, object userState) {
            if ((this.ReplayGdprVerifierOperationCompleted == null)) {
                this.ReplayGdprVerifierOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplayGdprVerifierOperationCompleted);
            }
            this.InvokeAsync("ReplayGdprVerifier", new object[] {
                        passID,
                        eOperation,
                        bstrGdprVerifierOld,
                        bstrOptionalParams}, this.ReplayGdprVerifierOperationCompleted, userState);
        }
        
        private void OnReplayGdprVerifierOperationCompleted(object arg) {
            if ((this.ReplayGdprVerifierCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplayGdprVerifierCompleted(this, new ReplayGdprVerifierCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#AddNextGenCredential", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddNextGenCredential(tagPASSID passId, string bstrInputXml) {
            this.Invoke("AddNextGenCredential", new object[] {
                        passId,
                        bstrInputXml});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddNextGenCredential(tagPASSID passId, string bstrInputXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddNextGenCredential", new object[] {
                        passId,
                        bstrInputXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddNextGenCredential(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AddNextGenCredentialAsync(tagPASSID passId, string bstrInputXml) {
            this.AddNextGenCredentialAsync(passId, bstrInputXml, null);
        }
        
        /// <remarks/>
        public void AddNextGenCredentialAsync(tagPASSID passId, string bstrInputXml, object userState) {
            if ((this.AddNextGenCredentialOperationCompleted == null)) {
                this.AddNextGenCredentialOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddNextGenCredentialOperationCompleted);
            }
            this.InvokeAsync("AddNextGenCredential", new object[] {
                        passId,
                        bstrInputXml}, this.AddNextGenCredentialOperationCompleted, userState);
        }
        
        private void OnAddNextGenCredentialOperationCompleted(object arg) {
            if ((this.AddNextGenCredentialCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddNextGenCredentialCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#CreateAlias2", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrAUID")]
        public string CreateAlias2(tagPASSID PassIDIn, string bstrAliasXML, bool fSuggestName, out string pbstrSuggestedNames, out string pbstrSLTResponseBlob) {
            object[] results = this.Invoke("CreateAlias2", new object[] {
                        PassIDIn,
                        bstrAliasXML,
                        fSuggestName});
            pbstrSuggestedNames = ((string)(results[1]));
            pbstrSLTResponseBlob = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateAlias2(tagPASSID PassIDIn, string bstrAliasXML, bool fSuggestName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateAlias2", new object[] {
                        PassIDIn,
                        bstrAliasXML,
                        fSuggestName}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCreateAlias2(System.IAsyncResult asyncResult, out string pbstrSuggestedNames, out string pbstrSLTResponseBlob) {
            object[] results = this.EndInvoke(asyncResult);
            pbstrSuggestedNames = ((string)(results[1]));
            pbstrSLTResponseBlob = ((string)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CreateAlias2Async(tagPASSID PassIDIn, string bstrAliasXML, bool fSuggestName) {
            this.CreateAlias2Async(PassIDIn, bstrAliasXML, fSuggestName, null);
        }
        
        /// <remarks/>
        public void CreateAlias2Async(tagPASSID PassIDIn, string bstrAliasXML, bool fSuggestName, object userState) {
            if ((this.CreateAlias2OperationCompleted == null)) {
                this.CreateAlias2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateAlias2OperationCompleted);
            }
            this.InvokeAsync("CreateAlias2", new object[] {
                        PassIDIn,
                        bstrAliasXML,
                        fSuggestName}, this.CreateAlias2OperationCompleted, userState);
        }
        
        private void OnCreateAlias2OperationCompleted(object arg) {
            if ((this.CreateAlias2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateAlias2Completed(this, new CreateAlias2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#UpdateAgeOutPolicy", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrResponseXML")]
        public string UpdateAgeOutPolicy(tagPASSID passID, string bstrParamXML) {
            object[] results = this.Invoke("UpdateAgeOutPolicy", new object[] {
                        passID,
                        bstrParamXML});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateAgeOutPolicy(tagPASSID passID, string bstrParamXML, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateAgeOutPolicy", new object[] {
                        passID,
                        bstrParamXML}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndUpdateAgeOutPolicy(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateAgeOutPolicyAsync(tagPASSID passID, string bstrParamXML) {
            this.UpdateAgeOutPolicyAsync(passID, bstrParamXML, null);
        }
        
        /// <remarks/>
        public void UpdateAgeOutPolicyAsync(tagPASSID passID, string bstrParamXML, object userState) {
            if ((this.UpdateAgeOutPolicyOperationCompleted == null)) {
                this.UpdateAgeOutPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAgeOutPolicyOperationCompleted);
            }
            this.InvokeAsync("UpdateAgeOutPolicy", new object[] {
                        passID,
                        bstrParamXML}, this.UpdateAgeOutPolicyOperationCompleted, userState);
        }
        
        private void OnUpdateAgeOutPolicyOperationCompleted(object arg) {
            if ((this.UpdateAgeOutPolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAgeOutPolicyCompleted(this, new UpdateAgeOutPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#RemovePassword", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("pbstrResponseXML")]
        public string RemovePassword(tagPASSID passID, string bstrOptionalParams) {
            object[] results = this.Invoke("RemovePassword", new object[] {
                        passID,
                        bstrOptionalParams});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRemovePassword(tagPASSID passID, string bstrOptionalParams, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RemovePassword", new object[] {
                        passID,
                        bstrOptionalParams}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndRemovePassword(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void RemovePasswordAsync(tagPASSID passID, string bstrOptionalParams) {
            this.RemovePasswordAsync(passID, bstrOptionalParams, null);
        }
        
        /// <remarks/>
        public void RemovePasswordAsync(tagPASSID passID, string bstrOptionalParams, object userState) {
            if ((this.RemovePasswordOperationCompleted == null)) {
                this.RemovePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemovePasswordOperationCompleted);
            }
            this.InvokeAsync("RemovePassword", new object[] {
                        passID,
                        bstrOptionalParams}, this.RemovePasswordOperationCompleted, userState);
        }
        
        private void OnRemovePasswordOperationCompleted(object arg) {
            if ((this.RemovePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemovePasswordCompleted(this, new RemovePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("PPSoapHeader")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("WSSecurityHeader")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("#GetSLT", RequestNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", ResponseNamespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("SLT")]
        public string GetSLT(tagPASSID PassIDIn, int LoginSeconds) {
            object[] results = this.Invoke("GetSLT", new object[] {
                        PassIDIn,
                        LoginSeconds});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSLT(tagPASSID PassIDIn, int LoginSeconds, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSLT", new object[] {
                        PassIDIn,
                        LoginSeconds}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetSLT(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSLTAsync(tagPASSID PassIDIn, int LoginSeconds) {
            this.GetSLTAsync(PassIDIn, LoginSeconds, null);
        }
        
        /// <remarks/>
        public void GetSLTAsync(tagPASSID PassIDIn, int LoginSeconds, object userState) {
            if ((this.GetSLTOperationCompleted == null)) {
                this.GetSLTOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSLTOperationCompleted);
            }
            this.InvokeAsync("GetSLT", new object[] {
                        PassIDIn,
                        LoginSeconds}, this.GetSLTOperationCompleted, userState);
        }
        
        private void OnGetSLTOperationCompleted(object arg) {
            if ((this.GetSLTCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSLTCompleted(this, new GetSLTCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1")]
    [System.Xml.Serialization.XmlRootAttribute("PPSoapHeader", Namespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", IsNullable=false)]
    public partial class PPSoapHeader_wrapper : System.Web.Services.Protocols.SoapHeader {
        
        private string[] textField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string[] Text {
            get {
                return this.textField;
            }
            set {
                this.textField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1")]
    [System.Xml.Serialization.XmlRootAttribute("WSSecurityHeader", Namespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1", IsNullable=false)]
    public partial class tagWSSECURITYHEADER : System.Web.Services.Protocols.SoapHeader {
        
        private EnumSHVersion versionField;
        
        private string wssecurityField;
        
        private string authorizationField;
        
        private string sitetokenField;
        
        private string apptokenField;
        
        private string ppSoapHeader25Field;
        
        private string auditInfoField;
        
        private string delegateField;
        
        private string originatorField;
        
        private string clientipField;
        
        private string clientosField;
        
        private string scenarioIDField;
        
        private string flowIDField;
        
        private string contextIDField;
        
        private string clientUserAgentField;
        
        private string unauthSessionIDField;
        
        private string uiFlavorField;
        
        /// <remarks/>
        public EnumSHVersion version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        public string wssecurity {
            get {
                return this.wssecurityField;
            }
            set {
                this.wssecurityField = value;
            }
        }
        
        /// <remarks/>
        public string authorization {
            get {
                return this.authorizationField;
            }
            set {
                this.authorizationField = value;
            }
        }
        
        /// <remarks/>
        public string sitetoken {
            get {
                return this.sitetokenField;
            }
            set {
                this.sitetokenField = value;
            }
        }
        
        /// <remarks/>
        public string apptoken {
            get {
                return this.apptokenField;
            }
            set {
                this.apptokenField = value;
            }
        }
        
        /// <remarks/>
        public string ppSoapHeader25 {
            get {
                return this.ppSoapHeader25Field;
            }
            set {
                this.ppSoapHeader25Field = value;
            }
        }
        
        /// <remarks/>
        public string auditInfo {
            get {
                return this.auditInfoField;
            }
            set {
                this.auditInfoField = value;
            }
        }
        
        /// <remarks/>
        public string @delegate {
            get {
                return this.delegateField;
            }
            set {
                this.delegateField = value;
            }
        }
        
        /// <remarks/>
        public string originator {
            get {
                return this.originatorField;
            }
            set {
                this.originatorField = value;
            }
        }
        
        /// <remarks/>
        public string clientip {
            get {
                return this.clientipField;
            }
            set {
                this.clientipField = value;
            }
        }
        
        /// <remarks/>
        public string clientos {
            get {
                return this.clientosField;
            }
            set {
                this.clientosField = value;
            }
        }
        
        /// <remarks/>
        public string scenarioID {
            get {
                return this.scenarioIDField;
            }
            set {
                this.scenarioIDField = value;
            }
        }
        
        /// <remarks/>
        public string flowID {
            get {
                return this.flowIDField;
            }
            set {
                this.flowIDField = value;
            }
        }
        
        /// <remarks/>
        public string contextID {
            get {
                return this.contextIDField;
            }
            set {
                this.contextIDField = value;
            }
        }
        
        /// <remarks/>
        public string clientUserAgent {
            get {
                return this.clientUserAgentField;
            }
            set {
                this.clientUserAgentField = value;
            }
        }
        
        /// <remarks/>
        public string unauthSessionID {
            get {
                return this.unauthSessionIDField;
            }
            set {
                this.unauthSessionIDField = value;
            }
        }
        
        /// <remarks/>
        public string uiFlavor {
            get {
                return this.uiFlavorField;
            }
            set {
                this.uiFlavorField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1")]
    public enum EnumSHVersion {
        
        /// <remarks/>
        eshHeader30,
        
        /// <remarks/>
        eshHeader25,
        
        /// <remarks/>
        eshNone,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1")]
    public partial class tagPASSID {
        
        private PASSIDTYPE pitField;
        
        private string bstrIDField;
        
        /// <remarks/>
        public PASSIDTYPE pit {
            get {
                return this.pitField;
            }
            set {
                this.pitField = value;
            }
        }
        
        /// <remarks/>
        public string bstrID {
            get {
                return this.bstrIDField;
            }
            set {
                this.bstrIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1")]
    public enum PASSIDTYPE {
        
        /// <remarks/>
        PASSID_KCFT,
        
        /// <remarks/>
        PASSID_AUID,
        
        /// <remarks/>
        PASSID_ALIASNAME,
        
        /// <remarks/>
        PASSID_PUID_SIGNINNAME,
        
        /// <remarks/>
        PASSID_ROLEID,
        
        /// <remarks/>
        PASSID_PPSACREDENTIALID,
        
        /// <remarks/>
        PASSID_NULL,
        
        /// <remarks/>
        PASSID_PUID,
        
        /// <remarks/>
        PASSID_SIGNINNAME,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1")]
    public enum eProofFilter {
        
        /// <remarks/>
        eProofFilter_Max,
        
        /// <remarks/>
        eProofFilter_Confirmed,
        
        /// <remarks/>
        eProofFilter_NeedVerification,
        
        /// <remarks/>
        eProofFilter_NeedConfirm,
        
        /// <remarks/>
        eProofFilter_All,
        
        /// <remarks/>
        eProofFilter_Invalid,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1")]
    public enum eReportCompromiseState {
        
        /// <remarks/>
        Skipped,
        
        /// <remarks/>
        RecentlyRecovered,
        
        /// <remarks/>
        AlreadyMarked,
        
        /// <remarks/>
        Throttled,
        
        /// <remarks/>
        Committed,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1")]
    public enum eAccountNameTypeFlags {
        
        /// <remarks/>
        eAccountNameType_All,
        
        /// <remarks/>
        eAccountNameType_Mobile,
        
        /// <remarks/>
        eAccountNameType_Email,
        
        /// <remarks/>
        eAccountNameType_Invalid,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1")]
    public enum tagNameType {
        
        /// <remarks/>
        kNameTypeMax,
        
        /// <remarks/>
        kNameTypeLast,
        
        /// <remarks/>
        kFederatedAltsecId,
        
        /// <remarks/>
        kGitHub,
        
        /// <remarks/>
        kSkype,
        
        /// <remarks/>
        kPhone,
        
        /// <remarks/>
        kEmail,
        
        /// <remarks/>
        kInvalNameType,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.microsoft.com/Passport/SoapServices/CredentialServiceAPI/V1")]
    public enum eGDPR_VERIFIER_OPERATION {
        
        /// <remarks/>
        Delete,
        
        /// <remarks/>
        ScopedDelete,
        
        /// <remarks/>
        AccountClose,
        
        /// <remarks/>
        Export,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetPassportIDCompletedEventHandler(object sender, GetPassportIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPassportIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPassportIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public tagPASSID Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((tagPASSID)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetCredentialInfoCompletedEventHandler(object sender, GetCredentialInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCredentialInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCredentialInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void AddCredentialCompletedEventHandler(object sender, AddCredentialCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCredentialCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCredentialCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrNetID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void UpdateCredentialCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void DeleteCredentialCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void RenameCredentialCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void UnblockCredentialCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void BlockCredentialCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void EnumCredentialsByNameCompletedEventHandler(object sender, EnumCredentialsByNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnumCredentialsByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnumCredentialsByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void EnumCredentialsByNetIDCompletedEventHandler(object sender, EnumCredentialsByNetIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnumCredentialsByNetIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnumCredentialsByNetIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void EnumCredentialsByNamespaceCompletedEventHandler(object sender, EnumCredentialsByNamespaceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnumCredentialsByNamespaceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnumCredentialsByNamespaceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetCertificateAssociationsCompletedEventHandler(object sender, GetCertificateAssociationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCertificateAssociationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCertificateAssociationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void DeleteCertificateAssociationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void DeleteAllCertificateAssociationsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetSigninNamesForNetIDsCompletedEventHandler(object sender, GetSigninNamesForNetIDsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSigninNamesForNetIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSigninNamesForNetIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void ForceCredentialRenameCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetNetIDsForSigninNamesCompletedEventHandler(object sender, GetNetIDsForSigninNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNetIDsForSigninNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNetIDsForSigninNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void QueryCredentialChangesCompletedEventHandler(object sender, QueryCredentialChangesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryCredentialChangesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryCredentialChangesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void QueryCredentialHistoryCompletedEventHandler(object sender, QueryCredentialHistoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryCredentialHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryCredentialHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void QueryCredentialHistoryByNetIDCompletedEventHandler(object sender, QueryCredentialHistoryByNetIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryCredentialHistoryByNetIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryCredentialHistoryByNetIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void QueryNetIDHistoryBySigninNameCompletedEventHandler(object sender, QueryNetIDHistoryBySigninNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryNetIDHistoryBySigninNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryNetIDHistoryBySigninNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void SuggestAlternateMemberNamesCompletedEventHandler(object sender, SuggestAlternateMemberNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SuggestAlternateMemberNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SuggestAlternateMemberNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetSigninNamesAndCIDsForNetIDsCompletedEventHandler(object sender, GetSigninNamesAndCIDsForNetIDsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSigninNamesAndCIDsForNetIDsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSigninNamesAndCIDsForNetIDsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetNetIDsAndCIDsForSigninNamesCompletedEventHandler(object sender, GetNetIDsAndCIDsForSigninNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNetIDsAndCIDsForSigninNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNetIDsAndCIDsForSigninNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void CheckAvailableSigninNamesCompletedEventHandler(object sender, CheckAvailableSigninNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckAvailableSigninNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckAvailableSigninNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void CheckRenameRulesCompletedEventHandler(object sender, CheckRenameRulesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckRenameRulesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckRenameRulesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void RenameCredentialExCompletedEventHandler(object sender, RenameCredentialExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RenameCredentialExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RenameCredentialExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void ReserveNameCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void AddLinkAccountsCompletedEventHandler(object sender, AddLinkAccountsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddLinkAccountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddLinkAccountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string pbstrLinkID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void DeLinkAccountsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetLinkAccountMembersCompletedEventHandler(object sender, GetLinkAccountMembersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLinkAccountMembersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLinkAccountMembersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void AssociateCertificateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void DisassociateCertificateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void DeleteCredentialExCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void CreateAliasCompletedEventHandler(object sender, CreateAliasCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateAliasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateAliasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrSuggestedNames {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void UpdateAliasCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void DeleteAliasCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void RenameAliasCompletedEventHandler(object sender, RenameAliasCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RenameAliasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RenameAliasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetAliasesForAccountCompletedEventHandler(object sender, GetAliasesForAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAliasesForAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAliasesForAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetAccountForAliasCompletedEventHandler(object sender, GetAccountForAliasCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountForAliasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountForAliasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void AddToReputationScoreCompletedEventHandler(object sender, AddToReputationScoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddToReputationScoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddToReputationScoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void OverrideReputationScoreCompletedEventHandler(object sender, OverrideReputationScoreCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class OverrideReputationScoreCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal OverrideReputationScoreCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetReputationScoreDetailsCompletedEventHandler(object sender, GetReputationScoreDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReputationScoreDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReputationScoreDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void EnumerateDeviceCompletedEventHandler(object sender, EnumerateDeviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnumerateDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnumerateDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void EnumerateAssociationsForDeviceCompletedEventHandler(object sender, EnumerateAssociationsForDeviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnumerateAssociationsForDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnumerateAssociationsForDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void AssociateDeviceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void DisassociateDeviceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void UpdateDevicePropertiesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void QueryDevicePropertiesCompletedEventHandler(object sender, QueryDevicePropertiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryDevicePropertiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryDevicePropertiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void ConvertCredentialCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void QueryNotificationsCompletedEventHandler(object sender, QueryNotificationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryNotificationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryNotificationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void ConsumeNotificationsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void AddProofCompletedEventHandler(object sender, AddProofCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddProofCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddProofCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void ConfirmProofCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void DeleteProofCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void LostProofsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetUserProofStateCompletedEventHandler(object sender, GetUserProofStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserProofStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserProofStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void SetAccountProtectionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetAccountProtectionCompletedEventHandler(object sender, GetAccountProtectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountProtectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountProtectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void SetUserPolicyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetUserPolicyCompletedEventHandler(object sender, GetUserPolicyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void UpdateChannelStateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void AddFamiliarLocationCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void ReportCompromiseCompletedEventHandler(object sender, ReportCompromiseCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReportCompromiseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReportCompromiseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public eReportCompromiseState Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((eReportCompromiseState)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public short WaitPeriod {
            get {
                this.RaiseExceptionIfNecessary();
                return ((short)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetEDUMigrationDataCompletedEventHandler(object sender, GetEDUMigrationDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEDUMigrationDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetEDUMigrationDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void DeleteDevicesCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void CreateApplicationPasswordCompletedEventHandler(object sender, CreateApplicationPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateApplicationPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateApplicationPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void ReadApplicationPasswordCompletedEventHandler(object sender, ReadApplicationPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReadApplicationPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReadApplicationPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void DeleteApplicationPasswordCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void SetUserNotificationStateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void FlagActivityCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void MakeAliasPrimaryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void QueryAccountNamesCompletedEventHandler(object sender, QueryAccountNamesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryAccountNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryAccountNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void CloseAccountCompletedEventHandler(object sender, CloseAccountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CloseAccountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CloseAccountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void RecoverAccountCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void UpdateApproverCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void RemoveApproverCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void MessageDispatcherCallbackCompletedEventHandler(object sender, MessageDispatcherCallbackCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MessageDispatcherCallbackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MessageDispatcherCallbackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void RequestMessageCompletedEventHandler(object sender, RequestMessageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RequestMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RequestMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void EnumerateDeviceExCompletedEventHandler(object sender, EnumerateDeviceExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnumerateDeviceExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnumerateDeviceExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void CheckCredentialPolicyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetIPLocationCompletedEventHandler(object sender, GetIPLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIPLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIPLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void QueryAccountNamesExCompletedEventHandler(object sender, QueryAccountNamesExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class QueryAccountNamesExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal QueryAccountNamesExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void DisassociateDeviceExCompletedEventHandler(object sender, DisassociateDeviceExCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DisassociateDeviceExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DisassociateDeviceExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void MoveAliasCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void ProvisionNetIDCompletedEventHandler(object sender, ProvisionNetIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProvisionNetIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProvisionNetIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetAccountsForProofCompletedEventHandler(object sender, GetAccountsForProofCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAccountsForProofCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAccountsForProofCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetIDPAccessTokenCompletedEventHandler(object sender, GetIDPAccessTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetIDPAccessTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetIDPAccessTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void UpdateIDPBindStateCompletedEventHandler(object sender, UpdateIDPBindStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateIDPBindStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateIDPBindStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void ProvisionDeviceCompletedEventHandler(object sender, ProvisionDeviceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ProvisionDeviceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ProvisionDeviceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetGdprVerifierCompletedEventHandler(object sender, GetGdprVerifierCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGdprVerifierCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGdprVerifierCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrGdprVerifier {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void EnumNextGenCredentialsCompletedEventHandler(object sender, EnumNextGenCredentialsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnumNextGenCredentialsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal EnumNextGenCredentialsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void RemoveNextGenCredentialCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void ReplayGdprVerifierCompletedEventHandler(object sender, ReplayGdprVerifierCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReplayGdprVerifierCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReplayGdprVerifierCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrGdprVerifierNew {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void AddNextGenCredentialCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void CreateAlias2CompletedEventHandler(object sender, CreateAlias2CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateAlias2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateAlias2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string pbstrSuggestedNames {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string pbstrSLTResponseBlob {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void UpdateAgeOutPolicyCompletedEventHandler(object sender, UpdateAgeOutPolicyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateAgeOutPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateAgeOutPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void RemovePasswordCompletedEventHandler(object sender, RemovePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemovePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemovePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    public delegate void GetSLTCompletedEventHandler(object sender, GetSLTCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.8.3928.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSLTCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSLTCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
