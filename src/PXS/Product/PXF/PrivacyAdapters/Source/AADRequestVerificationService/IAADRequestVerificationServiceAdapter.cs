// <copyright company="Microsoft Corporation">
//   Copyright (c) Microsoft Corporation.  All rights reserved.
// </copyright>
namespace Microsoft.Membership.MemberServices.PrivacyAdapters.AadRequestVerificationService
{
    using System;
    using System.Threading.Tasks;

    using Microsoft.Membership.MemberServices.Common;
    using Microsoft.Membership.MemberServices.PrivacyAdapters.AadRequestVerificationService.Models;
    using Microsoft.Membership.MemberServices.PrivacyAdapters.Models;
    using Microsoft.PrivacyServices.CommandFeed.Contracts.Subjects;
    using Microsoft.PrivacyServices.PXS.Command.Contracts.V1;

    /// <summary>
    ///     Interface for IAadRequestVerificationServiceAdapter.
    ///     AAD RVS design doc: https://microsoft.sharepoint.com/:w:/t/DataScienceEngineering/ES6eeH2YQnFDqNF94ai0k90BbUxEJCsEjBcGtN9v34_RTg?e=MvhfZe
    /// </summary>
    public interface IAadRequestVerificationServiceAdapter
    {
        /// <summary>
        ///     Determine the GDPR access rights for a target user.
        /// </summary>
        /// <param name="request">The request object.</param>
        /// <param name="requestContext">The request context.</param>
        /// <returns>An AAD RVS scope response.</returns>
        Task<AdapterResponse<AadRvsScopeResponse>> ActorListAuthorizationAsync(AadRvsActorRequest request, IRequestContext requestContext);

        /// <summary>
        ///     Gets a group of JWT verifiers for an account close request.
        /// </summary>
        /// <param name="request">The request object.</param>
        /// <returns>A group of verifiers generated by AAD RVS.</returns>
        Task<AdapterResponse<AadRvsVerifiers>> ConstructAccountCloseAsync(AadRvsRequest request);

        /// <summary>
        ///     Gets a group of JWT verifiers for an account cleanup request.
        /// </summary>
        /// <param name="request">The request object.</param>
        /// <param name="requestContext">The request context.</param>
        /// <returns>A group of verifiers generated by AAD RVS.</returns>
        Task<AdapterResponse<AadRvsVerifiers>> ConstructAccountCleanupAsync(AadRvsRequest request, IRequestContext requestContext);

        /// <summary>
        ///     Gets a group of JWT verifiers for a delete request.
        ///     NOTE: this stack is shared with MSA and we don't expect AAD RVS to return more than one verifier, so keep the return type as string
        /// </summary>
        /// <param name="request">The request object.</param>
        /// <param name="requestContext">The request context.</param>
        /// <returns>A group of verifiers generated by AAD RVS.</returns>
        Task<AdapterResponse<string>> ConstructDeleteAsync(AadRvsRequest request, IRequestContext requestContext);

        /// <summary>
        ///     Gets a group of JWT verifiers for an export request.
        /// </summary>
        /// <param name="request">The request object.</param>
        /// <param name="requestContext">The request context.</param>
        /// <returns>A group of verifiers generated by AAD RVS.</returns>
        Task<AdapterResponse<AadRvsVerifiers>> ConstructExportAsync(AadRvsRequest request, IRequestContext requestContext);

        /// <summary>
        ///     Add correct verifiers to PrivacyRequest
        /// </summary>
        /// <param name="request">The privacy request</param>
        /// <param name="verifiers">The verifiers</param>
        /// <returns>Update error if any</returns>
        AdapterError UpdatePrivacyRequestWithVerifiers(PrivacyRequest request, AadRvsVerifiers verifiers);

        /// <summary>
        ///     Try to get the organization's identifier puid.
        /// </summary>
        /// <param name="token">The AAD RVS token.</param>
        /// <param name="orgIdPuid">The organization's identifier puid.</param>
        /// <returns><c>true</c> if the AAD RVS token contained the puid, otherwise <c>false</c></returns>
        bool TryGetOrgIdPuid(string token, out long orgIdPuid);

        /// <summary>
        ///     Try to get the home tenant id.
        /// </summary>
        /// <param name="token">The AAD RVS token.</param>
        /// <param name="homeTenantId">The  home tenant id.</param>
        /// <returns><c>true</c> if the AAD RVS token contained the home tenant id, otherwise <c>false</c></returns>
        bool TryGetHomeTenantId(string token, out Guid homeTenantId);

        /// <summary>
        ///     Try to get the target tenant id type.
        /// </summary>
        /// <param name="token">The AAD RVS token.</param>
        /// <param name="tenantIdType">The target tenant id type.</param>
        /// <returns><c>true</c> if the AAD RVS token contained the target tenant id type, otherwise <c>false</c></returns>
        bool TryGetTenantIdType(string token, out TenantIdType tenantIdType);
    }
}
