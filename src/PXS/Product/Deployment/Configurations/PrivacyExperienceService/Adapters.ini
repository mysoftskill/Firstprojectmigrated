[AdaptersConfig]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IAdaptersConfiguration
GroupLocationDistanceMeters = 11
MsaIdentityServiceAdapterConfiguration=MsaIdentityServiceAdapter
envnamespace:ffprod$MsaIdentityServiceAdapterConfiguration=
envnamespace:mcprod$MsaIdentityServiceAdapterConfiguration=
envnamespace:eudbprod$MsaIdentityServiceAdapterConfiguration=
CustomerMasterAdapterConfiguration=CustomerMasterAdapter
envnamespace:ffprod$CustomerMasterAdapterConfiguration=
envnamespace:mcprod$CustomerMasterAdapterConfiguration=
envnamespace:eudbprod$CustomerMasterAdapterConfiguration=
DataManagementAdapterConfiguration=DataManagementAdapter
envnamespace:ffprod$DataManagementAdapterConfiguration=
envnamespace:mcprod$DataManagementAdapterConfiguration=
envnamespace:eudbprod$DataManagementAdapterConfiguration=
XboxAccountsAdapterConfiguration=XboxAccountsAdapter
envnamespace:ffprod$XboxAccountsAdapterConfiguration=
envnamespace:mcprod$XboxAccountsAdapterConfiguration=
envnamespace:eudbprod$XboxAccountsAdapterConfiguration=
MaxAccuracyRadiusMeters = 300
RetryStrategyConfigurations=FixedRetryStrategy,ExponentialRetryStrategy
AadRequestVerificationServiceAdapterConfiguration=AadRequestVerificationServiceAdapter
PcfAdapterConfiguration=PcfAdapter
VerificationValidationServiceConfiguration=VerificationValidationServiceConfig
GraphAdapterConfiguration=GraphAdapter
AnaheimIdAdapterConfiguration=AnaheimIdAdapter

; PrivacyFlightConfigurations is a prioritized list. Enter new flights in the order that take presedence.
; Example: Flight1,Flight2. If the flight header name of "Flight1" is found, it takes priority over "Flight2"
PrivacyFlightConfigurations=
; PROD should only have these flights in this order
envnamespace:prod$PrivacyFlightConfigurations=AllowedListUsersFlight,CorpnetUsersFlight,InsidersUsersFlight

; Assuming no flight header (default for most users), this value determines the default ring.
DefaultTargetRing=Prod

envnamespace:onebox$DefaultTargetRing=Ring1
envnamespace:ppe$DefaultTargetRing=PreProd
envnamespace:int$DefaultTargetRing=Ring1
envnamespace:ci1$DefaultTargetRing=Ring1
envnamespace:ci2$DefaultTargetRing=Ring1
envnamespace:dev1$DefaultTargetRing=Ring1
envnamespace:proxytest$DefaultTargetRing=Ring1
RingPartnerConfigOverrides=
envnamespace:onebox$RingPartnerConfigOverrides=Ring1PartnerConfigOverrideLocal
HttpRequestLoggingFilter=HttpRequestLoggingFilter
envnamespace:ffprod$HttpRequestLoggingFilter=
envnamespace:mcprod$HttpRequestLoggingFilter=
envnamespace:eudbprod$HttpRequestLoggingFilter=

; Refer to 'PartnerConfiguration.bond' for allowable RequiredResourceTypes values.
; Defines what resource types require adapters to have resource types for.
; Ex: If AppUsage is not listed here, and we have no adapters for it, then any requests for that type are not server errors.
RequiredResourceTypes=Browse,Location,Search,CortanaNotebookServiceList,Voice,VoiceAudio
envnamespace:onebox$RequiredResourceTypes=
envnamespace:ffprod$RequiredResourceTypes=
envnamespace:mcprod$RequiredResourceTypes=
envnamespace:eudbprod$RequiredResourceTypes=

; ********************** IMPORTANT *************************
;
; Improper configuration of this section can expose private data via XPert.  Ids listed here may ONLY be for test accounts order
;  users that have provided EXPLICIT permission for their data to be exposed in this way.
; Always fill in the config entry for the specific environment you need to test and especially avoid adding anything to the PROD 
;  Environment setting that is not absoutely required.
; The section below must be filled out for each id that has been added listing the id, the owning user, and the reason for the 
;  addition.
;  
;  CODE REVIEWERS MUST VERIFY THIS SECTION HAS BEEN UPDATED AND EXAMINE THE JUSTIFICATION FOR ANY ADDITIONS
; 
; The ids listed below must include a prefix indicating type.  These are the supported types, associated prefixes, and expected
;  string reprentstaions:
;  Type     Prefix      Format
;  PUID      p:         Decimal
;  CID       c:         Decimal
;
; ********************** IMPORTANT *************************
;
; ****************** ID LIST AND REASON ********************
;
; Fill in one row per id added using the following format
; <id>, <justification (including owning user)>
; p:<puid>, Requested by owner (<name>) for debugging issue
;
; ****************** ID LIST AND REASON ********************
[HttpRequestLoggingFilter]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IEventLoggingFilter
IdsForExtendedLogging=
envnamespace:ppe$IdsForExtendedLogging=
envnamespace:prod$IdsForExtendedLogging=

[Ring1PartnerConfigOverrideLocal]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IRingPartnerConfigOverride
Ring=Ring1
AllowedDataAgents=MockPd
AllowedResourceTypes=AppUsage,Browse,Search,Location,ContentConsumption,Voice,VoiceAudio
AuthenticationTypeOverride=AadPopToken
AadTokenResourceIdOverride=https://substrate.office.com
AadTokenScopeOverride=PdApi-Internal.ReadWrite
BaseUrlOverride=https://127.0.0.1:444

[AllowedListUsersFlight]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IFlightConfiguration
FlightName=PrivacyDataAllowedList
Ring=Ring1

[CorpnetUsersFlight]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IFlightConfiguration
FlightName=PrivacyDataCorpnet
Ring=Ring2

[InsidersUsersFlight]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IFlightConfiguration
FlightName=PrivacyDataInsiders
Ring=Ring3

[FixedRetryStrategy]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IRetryStrategyConfiguration
RetryMode=FixedInterval
FixedIntervalRetryConfiguration=FixedRetryConfiguration

[FixedRetryConfiguration]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IFixedIntervalRetryConfiguration
RetryCount=3
RetryIntervalInMilliseconds=1000

[ExponentialRetryStrategy]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IRetryStrategyConfiguration
RetryMode=ExponentialBackOff
ExponentialBackOffRetryConfiguration=ExponentialRetryConfiguration

[ExponentialRetryConfiguration]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IExponentialBackOffRetryConfiguration
RetryCount=3
DeltaBackOffInMilliseconds=1000
MinBackOffInMilliseconds=1000
MaxBackOffInMilliseconds=5000

[PcfAdapter]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IPcfPrivacyPartnerAdapterConfiguration
PartnerId=PcfAdapter
CounterCategoryName=PcfAdapter
envnamespace:onebox$SkipServerCertValidation=true
BaseUrl=https://ci1.pcf.privacy.microsoft-int.com/
envnamespace:onebox$BaseUrl=https://127.0.0.1:444/pcf/
envnamespace:ci1$BaseUrl=https://sf-pxsmockci1.api.account.microsoft-int.com/pcf/
envnamespace:ci2$BaseUrl=https://sf-pxsmockci2.api.account.microsoft-int.com/pcf/
envnamespace:dev1$BaseUrl=https://sf-pxsmockdev1.api.account.microsoft-int.com/pcf/
envnamespace:proxytest$BaseUrl=https://sf-pxsmockci1.api.account.microsoft-int.com/pcf/
envnamespace:prod$BaseUrl=https://pcf.privacy.microsoft.com/
envnamespace:ppe$BaseUrl=https://pcf.privacy.microsoft-ppe.com/
envnamespace:int$BaseUrl=https://sf-pxsmock.api.account.microsoft-int.com/pcf/
envnamespace:ffprod$BaseUrl=https://pcf.privacy.microsoft.com/
envnamespace:mcprod$BaseUrl=https://pcf.privacy.microsoft.com/
envnamespace:eudbprod$BaseUrl=https://pcf.privacy.microsoft.com/

RetryStrategyConfiguration=FixedRetryStrategy
ServicePointConfiguration=PcfAdapterServicePointConfiguration
TimeoutInMilliseconds=10000
SlowTimeoutInMilliseconds=60000
LittleSlowTimeoutInMilliseconds=30000
AadPcfTargetResource=https://MSAzureCloud.onmicrosoft.com/613e14a9-7c60-4f8b-863c-f719e68cd8db
envnamespace:prod$AadPcfTargetResource=https://MSAzureCloud.onmicrosoft.com/469dcb1e-f765-4199-b091-1907c74d8a22
envnamespace:ffprod$AadPcfTargetResource=https://USGovCloud.onmicrosoft.com/30e7cf4b-a849-4a5a-9265-c0748a538c49
envnamespace:mcprod$AadPcfTargetResource=https://ChinaGovCloud.partner.onmschina.cn/a1072bf2-9665-4644-86fe-094e0c48ead8
envnamespace:eudbprod$AadPcfTargetResource=https://MSAzureCloud.onmicrosoft.com/469dcb1e-f765-4199-b091-1907c74d8a22

[PcfAdapterServicePointConfiguration]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IServicePointConfiguration
MaxIdleTime=60000
ConnectionLeaseTimeout=60000
ConnectionLimit=20

[MsaIdentityServiceAdapter]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IMsaIdentityServiceAdapterConfiguration
PartnerId=MsaIdentityService
CounterCategoryName=MsaIdentityService
BaseUrl=https://api.login.live-int.com
envnamespace:prod$BaseUrl=https://api.login.live.com
envnamespace:ppe$BaseUrl=https://api.login.live.com
RetryStrategyConfiguration=FixedRetryStrategy
ServicePointConfiguration=MsaIdentityServiceAdapterServicePointConfiguration
IgnoreErrors=false
; PPE ignores errors becaues it does not get access by MSA. This is to prevent NGP from having privilege of getting verifiers in non-prod envs.
; Because of lack of access, all requests will fail with access denied, and no verifier tokens will be acquired (ever).
envnamespace:ppe$IgnoreErrors=true
envnamespace:prod$IgnoreErrors=false
EnableAdapter=true
; Disable in PPE because PPE will not get access.
envnamespace:ppe$EnableAdapter=false

[AadRequestVerificationServiceAdapter]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IAadRequestVerificationServiceAdapterConfiguration
PartnerId=AADRequestVerificationService
CounterCategoryName=AADRequestVerificationService

envnamespace:onebox$SkipServerCertValidation=true

envnamespace:onebox$BaseUrl=https://127.0.0.1:444
envnamespace:ci1$BaseUrl=https://sf-pxsmockci1.api.account.microsoft-int.com
envnamespace:ci2$BaseUrl=https://sf-pxsmockci2.api.account.microsoft-int.com
envnamespace:dev1$BaseUrl=https://sf-pxsmockdev1.api.account.microsoft-int.com
envnamespace:proxytest$BaseUrl=https://sf-pxsmockci1.api.account.microsoft-int.com
envnamespace:int$BaseUrl=https://aadrvs-ppe.msidentity.com
envnamespace:prod$BaseUrl=https://aadrvs.msidentity.com
envnamespace:ppe$BaseUrl=https://aadrvs-ppe.msidentity.com
envnamespace:ffprod$BaseUrl=https://aadrvs.msidentity.us
envnamespace:mcprod$BaseUrl=https://aadrvs.msidentity.cn
envnamespace:eudbprod$BaseUrl=https://aadrvs.msidentity.com
RetryStrategyConfiguration=FixedRetryStrategy
TimeoutInMilliseconds=60000
ServicePointConfiguration=AadRequestVerificationServicePointConfiguration
EnableAdapter=false
envnamespace:prod$EnableAdapter=true
envnamespace:ffprod$EnableAdapter=true
envnamespace:mcprod$EnableAdapter=true
envnamespace:eudbprod$EnableAdapter=true
AadAppId=c728155f-7b2a-4502-a08b-b8af9b269319

[MsaIdentityServiceAdapterServicePointConfiguration]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IServicePointConfiguration
MaxIdleTime=60000
ConnectionLeaseTimeout=60000
ConnectionLimit=10

[AadRequestVerificationServicePointConfiguration]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IServicePointConfiguration
MaxIdleTime=60000
ConnectionLeaseTimeout=60000
ConnectionLimit=100

[CustomerMasterServicePointConfiguration]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IServicePointConfiguration
MaxIdleTime=60000
ConnectionLeaseTimeout=60000
ConnectionLimit=100

[CustomerMasterAdapter]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IPrivacyPartnerAdapterConfiguration
CounterCategoryName=CustomerMaster
MsaS2STargetSite=pxs.api.account.microsoft-int.com
envnamespace:prod$MsaS2STargetSite=www.microsoft.com
envnamespace:ppe$MsaS2STargetSite=unistorefd-int.www.microsoft.com
; Default VIP is set to PXS-Sandbox-MW1P.PrivacyMockMF
BaseUrl=https://sf-pxsmock.api.account.microsoft-int.com
envnamespace:onebox$BaseUrl=https://127.0.0.1:444
; BaseUrl should be a Backend accessible IP of the Mock MF
envnamespace:ci1$BaseUrl=https://sf-pxsmockci1.api.account.microsoft-int.com
envnamespace:ci2$BaseUrl=https://sf-pxsmockci2.api.account.microsoft-int.com
envnamespace:dev1$BaseUrl=https://sf-pxsmockdev1.api.account.microsoft-int.com
envnamespace:int$BaseUrl=https://sf-pxsmock.api.account.microsoft-int.com
envnamespace:prod$BaseUrl=https://jcmsfd.account.microsoft.com
envnamespace:ppe$BaseUrl=https://jcmsfd-proxy.account.microsoft.com
RetryStrategyConfiguration=FixedRetryStrategy
envnamespace:onebox$SkipServerCertValidation=true
envnamespace:ci1$SkipServerCertValidation=true
envnamespace:ci2$SkipServerCertValidation=true
envnamespace:int$SkipServerCertValidation=true
ServicePointConfiguration=CustomerMasterServicePointConfiguration

[DataManagementAdapter]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IPrivacyPartnerAdapterConfiguration
CounterCategoryName=PrivacyDataManagementService
MsaS2STargetSite=management.privacy.microsoft-int.com
envnamespace:prod$MsaS2STargetSite=management.privacy.microsoft.com
envnamespace:ppe$MsaS2STargetSite=management.privacy.microsoft.com
BaseUrl=https://management.privacy.microsoft-int.com
envnamespace:prod$BaseUrl=https://management.privacy.microsoft.com
envnamespace:ppe$BaseUrl=https://management.privacy.microsoft.com
envnamespace:onebox$BaseUrl=https://management.privacy.microsoft-ppe.com
RetryStrategyConfiguration=FixedRetryStrategy
ServicePointConfiguration=DataManagementAdapterServicePointConfiguration
AadTokenResourceId=ff3a41f1-6748-48fa-ba46-d19a123ae965
envnamespace:prod$AadTokenResourceId=b1b98629-ed2f-450c-9095-b895d292ccf1
envnamespace:ppe$AadTokenResourceId=ff3a41f1-6748-48fa-ba46-d19a123ae965
envnamespace:onebox$AadTokenResourceId=ff3a41f1-6748-48fa-ba46-d19a123ae965

[XboxAccountsAdapter]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IXboxAccountsAdapterConfiguration
CounterCategoryName=XboxAccounts
MsaS2STargetSite=user.auth.dnet.xboxlive.com
envnamespace:prod$MsaS2STargetSite=user.auth.xboxlive.com
envnamespace:ppe$MsaS2STargetSite=user.auth.xboxlive.com
XtokenMsaS2STargetSite=s2sapp.user.auth.dnet.xboxlive.com
envnamespace:prod$XtokenMsaS2STargetSite=s2sapp.user.auth.xboxlive.com
envnamespace:ppe$XtokenMsaS2STargetSite=s2sapp.user.auth.xboxlive.com
BaseUrl=https://sf-pxsmock.api.account.microsoft-int.com
envnamespace:onebox$BaseUrl=https://127.0.0.1:444
envnamespace:ci1$BaseUrl=https://sf-pxsmockci1.api.account.microsoft-int.com
envnamespace:ci2$BaseUrl=https://sf-pxsmockci2.api.account.microsoft-int.com
envnamespace:dev1$BaseUrl=https://sf-pxsmockdev1.api.account.microsoft-int.com
envnamespace:prod$BaseUrl=https://accounts-partner.xboxlive.com
envnamespace:ppe$BaseUrl=https://accounts-partner.xboxlive.com
RetryStrategyConfiguration=FixedRetryStrategy
envnamespace:onebox$XassServiceEndpoint=https://127.0.0.1:444
XassServiceEndpoint=https://sf-pxsmock.api.account.microsoft-int.com
envnamespace:ci1$XassServiceEndpoint=https://sf-pxsmockci1.api.account.microsoft-int.com
envnamespace:ci2$XassServiceEndpoint=https://sf-pxsmockci2.api.account.microsoft-int.com
envnamespace:dev1$XassServiceEndpoint=https://sf-pxsmockdev1.api.account.microsoft-int.com
envnamespace:prod$XassServiceEndpoint=https://service.auth.xboxlive.com:10443
envnamespace:ppe$XassServiceEndpoint=https://service.auth.xboxlive.com:10443
envnamespace:onebox$XasuServiceEndpoint=https://127.0.0.1:444
XasuServiceEndpoint=https://sf-pxsmock.api.account.microsoft-int.com
envnamespace:ci1$XasuServiceEndpoint=https://sf-pxsmockci1.api.account.microsoft-int.com
envnamespace:ci2$XasuServiceEndpoint=https://sf-pxsmockci2.api.account.microsoft-int.com
envnamespace:dev1$XasuServiceEndpoint=https://sf-pxsmockdev1.api.account.microsoft-int.com
envnamespace:prod$XasuServiceEndpoint=https://user.auth.xboxlive.com:10443
envnamespace:ppe$XasuServiceEndpoint=https://user.auth.xboxlive.com:10443
envnamespace:onebox$XstsServiceEndpoint=https://127.0.0.1:444
XstsServiceEndpoint=https://sf-pxsmock.api.account.microsoft-int.com
envnamespace:ci1$XstsServiceEndpoint=https://sf-pxsmockci1.api.account.microsoft-int.com
envnamespace:ci2$XstsServiceEndpoint=https://sf-pxsmockci2.api.account.microsoft-int.com
envnamespace:dev1$XstsServiceEndpoint=https://sf-pxsmockdev1.api.account.microsoft-int.com
envnamespace:prod$XstsServiceEndpoint=https://xsts.auth.xboxlive.com
envnamespace:ppe$XstsServiceEndpoint=https://xsts.auth.xboxlive.com
envnamespace:onebox$SkipServerCertValidation=true
envnamespace:ci1$SkipServerCertValidation=true
envnamespace:ci2$SkipServerCertValidation=true
envnamespace:dev1$SkipServerCertValidation=true
RefreshXassTokenBeforeExpiryMinutes=10
MaxXassTokenCacheAgeMinutes=480
; Certificate for generating S2S token for Xbox auth. Need to be registered in msm.live.com
S2SCertificateConfiguration=XboxS2SCertificateINT
envnamespace:prod$S2SCertificateConfiguration=XboxS2SCertificatePROD
envnamespace:ppe$S2SCertificateConfiguration=XboxS2SCertificatePPE

[XboxS2SCertificateINT]
_meta.type=Microsoft.Membership.MemberServices.Configuration.ICertificateConfiguration
; ame private v2 cert
Subject=pxs-s2s.api.account.microsoft-int.com

[XboxS2SCertificatePPE]
_meta.type=Microsoft.Membership.MemberServices.Configuration.ICertificateConfiguration
; ame private v2 cert
Subject=pxs-s2s.api.account.microsoft-ppe.com

[XboxS2SCertificatePROD]
_meta.type=Microsoft.Membership.MemberServices.Configuration.ICertificateConfiguration
; ame private v2 cert
Subject=s2s.pxs.privacy.microsoft.com

[DataManagementAdapterServicePointConfiguration]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IServicePointConfiguration
; Increasing MaxIdleTime/ConnectionLeaseTimeout to a value greater than the polling interval used by the adapter.
MaxIdleTime=90000
ConnectionLeaseTimeout=90000
ConnectionLimit=4

[VerificationValidationServiceConfig]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IVerificationValidationServiceConfig
; AAD verifiers are mocked in CI/INT so do not use verification service there, meaning validation would fail if it's attempted
EnableVerificationCheckAad=true
envnamespace:onebox$EnableVerificationCheckAad=false
envnamespace:ci1$EnableVerificationCheckAad=false
envnamespace:ci2$EnableVerificationCheckAad=false
envnamespace:dev1$EnableVerificationCheckAad=false
envnamespace:int$EnableVerificationCheckAad=false
envnamespace:proxytest$EnableVerificationCheckAad=false

; MSA gives us verifiers in INT and PROD
; But since PPE doesn't get MSA verifiers, disable check only in PPE.
EnableVerificationCheckMsa=true
envnamespace:onebox$EnableVerificationCheckMsa=false
envnamespace:ci1$EnableVerificationCheckMsa=false
envnamespace:ci2$EnableVerificationCheckMsa=false
envnamespace:dev1$EnableVerificationCheckMsa=false
envnamespace:proxytest$EnableVerificationCheckMsa=false
envnamespace:ppe$EnableVerificationCheckMsa=false

TargetMsaKeyDiscoveryEnvironment=MsaInt
envnamespace:ppe$TargetMsaKeyDiscoveryEnvironment=None
envnamespace:prod$TargetMsaKeyDiscoveryEnvironment=MsaProd
envnamespace:ffprod$TargetMsaKeyDiscoveryEnvironment=MsaProd
envnamespace:mcprod$TargetMsaKeyDiscoveryEnvironment=MsaProd
envnamespace:eudbprod$TargetMsaKeyDiscoveryEnvironment=MsaProd

[GraphAdapter]
; At this momemnt all EUDB config for Graph stays same as Public Cloud. May need to change one we have any update
_meta.type=Microsoft.Membership.MemberServices.Configuration.IGraphAdapterConfiguration
PartnerId=GraphService
envnamespace:ffprod$PartnerId=AadGraphUS
envnamespace:mcprod$PartnerId=GraphServiceChina
envnamespace:eudbprod$PartnerId=GraphService
CounterCategoryName=GraphService
envnamespace:ffprod$CounterCategoryName=AadGraphUS
envnamespace:mcprod$CounterCategoryName=GraphServiceChina
envnamespace:eudbprod$CounterCategoryName=GraphService
; Default VIP is set to PXS-Sandbox-MW1P.PrivacyMockMF
BaseUrl=https://sf-pxsmock.api.account.microsoft-int.com
envnamespace:onebox$BaseUrl=https://127.0.0.1:444
; BaseUrl should be a Backend accessible IP of the Mock MF
envnamespace:ci1$BaseUrl=https://sf-pxsmockci1.api.account.microsoft-int.com
envnamespace:ci2$BaseUrl=https://sf-pxsmockci2.api.account.microsoft-int.com
envnamespace:dev1$BaseUrl=https://sf-pxsmockdev1.api.account.microsoft-int.com
envnamespace:proxytest$BaseUrl=https://sf-pxsmockci1.api.account.microsoft-int.com
envnamespace:int$BaseUrl=https://graph.windows.net/
envnamespace:prod$BaseUrl=https://graph.windows.net/
envnamespace:ppe$BaseUrl=https://graph.windows.net/
envnamespace:ffprod$BaseUrl=https://graph.microsoftazure.us/
envnamespace:mcprod$BaseUrl=https://graph.chinacloudapi.cn/
envnamespace:eudbprod$BaseUrl=https://graph.windows.net/
RetryStrategyConfiguration=FixedRetryStrategy
SkipServerCertValidation=false
envnamespace:onebox$SkipServerCertValidation=true
envnamespace:ci1$SkipServerCertValidation=true
envnamespace:ci2$SkipServerCertValidation=true
envnamespace:dev1$SkipServerCertValidation=true
envnamespace:int$SkipServerCertValidation=true
envnamespace:proxytest$SkipServerCertValidation=true
AadGraphResource=https://graph.windows.net/
envnamespace:ffprod$AadGraphResource=https://graph.microsoftazure.us/
envnamespace:mcprod$AadGraphResource=https://graph.chinacloudapi.cn/
envnamespace:eudbprod$AadGraphResource=https://graph.windows.net/
ApiVersion=1.6

[AIdEventHubConfiguration]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IAIdEventHubConfiguration
EventHubNameSpace=aid-eventhub-onebox
; EventHub devicedeletes is used by AID EndToEnd FCT to mock the EventHub owned by Anaheim in PPE and PROD
EventHubName1=devicedeletes
BlobAccountName=aidstorageonebox
BlobContainerName=devicedeletecontainer
;OneBox
envnamespace:onebox$EventHubNameSpace=aid-eventhub-onebox
envnamespace:onebox$BlobAccountName=aidstorageonebox
envnamespace:onebox$BlobContainerName=devicedeletecontainer
; CI1
envnamespace:ci1$EventHubNameSpace=aid-eventhub-ci1
envnamespace:ci1$BlobAccountName=aidstorageci1
envnamespace:ci1$BlobContainerName=devicedeletecontainer
; CI2
envnamespace:ci2$EventHubNameSpace=aid-eventhub-ci2
envnamespace:ci2$BlobAccountName=aidstorageci2
envnamespace:ci2$BlobContainerName=devicedeletecontainer
; DEV1
envnamespace:dev1$EventHubNameSpace=aid-eventhub-dev1
envnamespace:dev1$BlobAccountName=aidstoragedev1
envnamespace:dev1$BlobContainerName=devicedeletecontainer
; PPE
envnamespace:ppe$EventHubNameSpace=ehns-edid-icf-ppe
envnamespace:ppe$EventHubName1=primary
envnamespace:ppe$BlobAccountName=aidstorageppe
envnamespace:ppe$BlobContainerName=devicedeletecontainer
; PROD
envnamespace:prod$EventHubNameSpace=ehns-edid-icf-prod
envnamespace:prod$EventHubName1=primary
envnamespace:prod$BlobAccountName=aidstorageprodwestus2
envnamespace:prod$BlobContainerName=devicedeletecontainer

[AIdAuthConfiguration]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IAIdAuthConfiguration
TenantId=33e01921-4d64-4f8c-a055-5bdaffd5e33d
ClientId=975e1332-de26-4ac9-b120-fe35fa68adf1
CertSubjectName=aad-auth-ppe.compliance-services.microsoft.com
; PROD
envnamespace:prod$ClientId=12586d9c-4361-4ed3-9e88-17c1b23f6c91
envnamespace:prod$CertSubjectName=aad-auth-prod.compliance-services.microsoft.com

[AnaheimIdAdapter]
_meta.type=Microsoft.Membership.MemberServices.Configuration.IAnaheimIdAdapterConfiguration
EventHubConfiguration=AIdEventHubConfiguration
AIdAuthConfiguration=AIdAuthConfiguration
